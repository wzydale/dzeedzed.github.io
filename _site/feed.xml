<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dadi &quot;D.Z.&quot; Zhang</title>
    <description>Dadi &quot;D.Z.&quot; Zhang | Coder. Developer. Language enthusiast. Go fanatic. Jays fan. Worships 442.
</description>
    <link>http://dzed.me/</link>
    <atom:link href="http://dzed.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 May 2016 23:29:04 -0400</pubDate>
    <lastBuildDate>Fri, 27 May 2016 23:29:04 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>My Intramural Stats</title>
        <description>&lt;h2 id=&quot;casual-slopitch---team-individuals-1-king-louis-and-his-faithful-knights&quot;&gt;Casual Slopitch - Team: Individuals 1 (King Louis and His Faithful Knights)&lt;/h2&gt;

&lt;h1 id=&quot;may-19-2016---14-13-views&quot;&gt;May 19, 2016 - 14-13 Views&lt;/h1&gt;

&lt;p&gt;2B -&amp;gt; 1B (PO) -&amp;gt; C -&amp;gt; RF&lt;br /&gt;
Batted 9th: 3-3, 2B, 2 1B, 2 RBI, R&lt;/p&gt;

&lt;h1 id=&quot;may-25-2016---8-9-tsr&quot;&gt;May 25, 2016 - 8-9 TSR&lt;/h1&gt;

&lt;p&gt;1B (DP, unassisted) -&amp;gt; 3B (E5) -&amp;gt; LF&lt;br /&gt;
Batted 7th: 1-2, 1B, FC, RBI, 2R&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;casual-7-vs-7-soccer-football---team-individuals-2&quot;&gt;Casual 7 vs. 7 Soccer (Football) - Team: Individuals 2&lt;/h2&gt;

&lt;h1 id=&quot;may-17-2016---0-6-team-hunnies&quot;&gt;May 17, 2016 - 0-6 Team Hunnies&lt;/h1&gt;

&lt;p&gt;RB -&amp;gt; CB -&amp;gt; DM&lt;/p&gt;
</description>
        <pubDate>Fri, 27 May 2016 23:00:00 -0400</pubDate>
        <link>http://dzed.me/blog/2016/05/27/Intramurals.html</link>
        <guid isPermaLink="true">http://dzed.me/blog/2016/05/27/Intramurals.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>JobMine Updates - Spring 2016</title>
        <description>&lt;h1 id=&quot;may-7-2016&quot;&gt;May 7, 2016&lt;/h1&gt;

&lt;p&gt;Shortlisted 28 job postings on JobMine.&lt;/p&gt;

&lt;h1 id=&quot;may-8-2016&quot;&gt;May 8, 2016&lt;/h1&gt;

&lt;p&gt;Added 5 more. Now most jobs on my shortlist are dev jobs.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 02:20:00 -0400</pubDate>
        <link>http://dzed.me/blog/2016/05/08/Jobmine.html</link>
        <guid isPermaLink="true">http://dzed.me/blog/2016/05/08/Jobmine.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Courses I Plan to Take at UWaterloo (BCS &amp; Data Science)</title>
        <description>&lt;p&gt;3 Winter terms, 1 Spring term, 1 Fall term&lt;/p&gt;

&lt;h2 id=&quot;b---winter-2017&quot;&gt;2B - Winter 2017&lt;/h2&gt;
&lt;p&gt;CS 240 - Data Structures and Data Management&lt;br /&gt;
CS 241 - Foundations of Sequential Programs&lt;br /&gt;
CS 251 - Computer Organization and Design&lt;br /&gt;
MATH 239 - Introduction to Combinatorics&lt;br /&gt;
CO 250 - Introduction to Optimization&lt;/p&gt;

&lt;h2 id=&quot;a---fall-2017&quot;&gt;3A - Fall 2017&lt;/h2&gt;
&lt;p&gt;CS 341 - Algorithms&lt;br /&gt;
CS 350 - Operating Systems&lt;br /&gt;
STAT 341 - Computational Statistics and Data Analysis&lt;br /&gt;
SCI 206 - The Physics of How Things Work &lt;br /&gt;
ENGL 306A - Introduction to Linguistics&lt;/p&gt;

&lt;h2 id=&quot;b---spring-2018&quot;&gt;3B - Spring 2018&lt;/h2&gt;
&lt;p&gt;CS 486 - Introduction to Artificial Intelligence&lt;br /&gt;
STAT 440 - Computational Inference&lt;br /&gt;
CS 370 - Numerical Computation&lt;/p&gt;

&lt;h2 id=&quot;a---winter-2019&quot;&gt;4A - Winter 2019&lt;/h2&gt;
&lt;p&gt;CS 456 - Computer Networks&lt;br /&gt;
CS 343 - Concurrent and Parallel Programming&lt;br /&gt;
CS 485 - Machine Learning: Statistical and Computational Foundations&lt;/p&gt;

&lt;h2 id=&quot;b---winter-2020&quot;&gt;4B - Winter 2020&lt;/h2&gt;
&lt;p&gt;CS 452 - Real-time Programming&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/top/2016/05/02/course-planning.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/top/2016/05/02/course-planning.html</guid>
        
        
        <category>notes</category>
        
        <category>top</category>
        
      </item>
    
      <item>
        <title>STAT 231 - Statistics</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;STAT 231 - Statistics
Instructor: Surya Banerjee
Location: DC 1350
Time: Mondays and Wednesdays 2:30am - 3:50pm
Tutorials: DC 1351 Mondays 5:30pm - 6:20pm
Term: Spring 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;may-2-2016---lecture-1&quot;&gt;May 2, 2016 - Lecture 1&lt;/h2&gt;

&lt;p&gt;Email: s22baner@uwaterloo.ca or suryabanerjee@gmail.com&lt;/p&gt;

&lt;p&gt;Course Marking Scheme: 3 Tutorial Quizzes (TQ) and 2 Midterms&lt;/p&gt;

&lt;p&gt;STAT 231 is the reverse of STAT 230. E.g. We toss a coin 100 times, we get 60 heads. In STAT 230, we calculate the probability of that happening (binomial distribution, 100 and 0.5, P(X=60)) with all the parameters given (P = 0.5 to get a head for a fair coin). In STAT 231, we try to find the parameters by experiments, and try to infer what we can say about the “fairness” of the coin.&lt;/p&gt;

&lt;p&gt;MLB: Between 1901-1941, batters with BA .400+: 11. 1941 onwards: 0. Why? Use statistics to find out.&lt;/p&gt;

&lt;p&gt;Kansas Weathermen: They are correct about whether it will rain the next day about 85% of the time. Good record, right? However, it only rains about 10% of the time in Kansas. So if I go to the weather broadcasting station and say “no rain tomorrow” and then go home, I will be statistically more accuarate that these meteorologists.&lt;/p&gt;

&lt;p&gt;Baseball Pundits: Pundits are right about the outcome of baseball games about 48% of the time. Literally worse than a coin.&lt;/p&gt;

&lt;p&gt;In STAT 231, we learn how to test claims and check for correlation and causation. How can we make the leap from correlation to causation? (Recommended reading: Freakanomics)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-data-analysis&quot;&gt;Introduction to Data Analysis&lt;/h2&gt;

&lt;p&gt;Data can be classified into two categories: numerical and categorical (non-numerical).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Numerical Data&lt;/strong&gt; is either discrete or continuous. Discrete data (e.g. number of accidents) takes integer values, while continuous data (e.g. height, weight) measure non-integer values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categorical Data&lt;/strong&gt; is either ordinal (if there’s an underlying order, e.g. on a scale from 1 to 10, 1 being least satisfied and 10 being most satisfied) or non-ordinal (no order, e.g. nationality, favorite color).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transformation&lt;/strong&gt; {x&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;,…, x&lt;sub&gt;n&lt;/sub&gt;}&lt;br /&gt;
y&lt;sub&gt;i&lt;/sub&gt; = f(x&lt;sub&gt;i&lt;/sub&gt;) is a transformation.&lt;/p&gt;

&lt;p&gt;An affine transformation is a linear transformation: y&lt;sub&gt;i&lt;/sub&gt; = ax&lt;sub&gt;i&lt;/sub&gt; + b&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding&lt;/strong&gt; is the conversion of categorical data into numerical data.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-summaries&quot;&gt;Data Summaries&lt;/h2&gt;

&lt;p&gt;We want to extract important information about data.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Numerical: come up with numbers that represent different properties of the data set&lt;/li&gt;
  &lt;li&gt;Graphical: graph that tells us the shape of the data set&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are some properties of interest:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Centre of the data set -&amp;gt; &lt;strong&gt;Central Tendency&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How volatile is the data set -&amp;gt; &lt;strong&gt;Dispersion&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the data set is symmetric -&amp;gt; &lt;strong&gt;Measures of Symmetry&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How “fat” the tails of the data set are (i.e. the size of extrema) -&amp;gt; &lt;strong&gt;Kurtosis&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;measures-of-central-tendency&quot;&gt;Measures of Central Tendency&lt;/h2&gt;

&lt;p&gt;Data set: {y&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;,…, y&lt;sub&gt;n&lt;/sub&gt;}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Mean:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Property: The sum of the deviations of the observations from the sample mean is 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Geometric Mean&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harmonic Mean&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-4-2016---lecture-2&quot;&gt;May 4, 2016 - Lecture 2&lt;/h2&gt;

&lt;p&gt;Lecture notes will be posted every weekend.&lt;br /&gt;
Practice questions (with solutions) will be posted this week. First tutuorial quiz on May 17 (T), 2016 (11:25am).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Outline&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;measures of central tendency: medias, quartiles, mode&lt;/li&gt;
  &lt;li&gt;measures of variability: range, IQR, variance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample -&amp;gt; Predictions about the population&lt;/p&gt;

&lt;h1 id=&quot;data-summaries-1&quot;&gt;Data Summaries&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Centre: CENTRAL TENDENCY&lt;/li&gt;
  &lt;li&gt;Variability: DISPERSION&lt;/li&gt;
  &lt;li&gt;Tails are similar: SYMMETRY&lt;/li&gt;
  &lt;li&gt;Frequency of Extreme Obersevations: KURTOSIS&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;numerical-and-graphical-summaries&quot;&gt;Numerical and Graphical Summaries&lt;/h1&gt;

&lt;p&gt;{y&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;, … , y&lt;sub&gt;n&lt;/sub&gt;}&lt;/p&gt;

&lt;p&gt;Sample mean: 1/n sigma y&lt;sub&gt;i&lt;/sub&gt;&lt;br /&gt;
Properties: sigma (y&lt;sub&gt;i&lt;/sub&gt; - mean) = 0&lt;/p&gt;

&lt;p&gt;Also, affine transformation preserves linear combinations (i.e. the arithmetic mean changes accordingly by the affine transformation)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;: the middle most observations&lt;br /&gt;
arrange the data set in ascending order and pick the middle one. e.g. 1, 3, 7, 13, 25. Median is 7.&lt;/p&gt;

&lt;p&gt;Median is not too sensitive with extreme values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quartiles&lt;/strong&gt;: Q1: lower quartile, Q3: upper quartile&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Percentiles&lt;/strong&gt;: Instead of dividing into 4 parts, the data is divided into 100 parts.&lt;/p&gt;

&lt;p&gt;Eg. p=0.25, m = (n+1) * p, n is the number of observations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mode&lt;/strong&gt;: Observation that occurs with the maximum frequency&lt;/p&gt;

&lt;p&gt;St.Petersburg’s Paradox. We care about averages (expected values), but also risk. Variability is a very important property of a data set. E.g. Country A 0 0 0 1000 and Country B 250 250 250 250
Goalie A 0 6 0 6 0 6 0 6 Goalie B 3 3 3 3 3 3 3&lt;/p&gt;

&lt;h1 id=&quot;measures-of-volatility&quot;&gt;Measures of Volatility&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Range&lt;/strong&gt;: Max - Min&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interquartile Range (IQR)&lt;/strong&gt;: IQR = Q3 - Q1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Variance and Sample Standard Deviation&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Variance&lt;/strong&gt;: s&lt;sup&gt;2&lt;/sup&gt; = 1/(n-1) sigma (y&lt;sub&gt;i&lt;/sub&gt; - y average)&lt;sup&gt;2&lt;/sup&gt; is approximatey the average of the squared deviation from the mean&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Standard Deviation&lt;/strong&gt;: s = positive square root of s^2, the sample variance&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mean Absolute Deviation(MAD)&lt;/strong&gt;: 1/n sigma abs(y&lt;sub&gt;i&lt;/sub&gt; - y average)&lt;/p&gt;

&lt;p&gt;Say a data set of x&lt;sub&gt;i&lt;/sub&gt; is transformed by an affine transformation y&lt;sub&gt;i&lt;/sub&gt; = a + bx&lt;sub&gt;i&lt;/sub&gt;. Then s&lt;sup&gt;2&lt;/sup&gt; of y = b&lt;sup&gt;2&lt;/sup&gt;s&lt;sup&gt;2&lt;/sup&gt;. And the standard deviation is multiplied by the absolute value of b.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-9-2016---lecture-3&quot;&gt;May 9, 2016 - Lecture 3&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Practice problems with solutions on LEARN&lt;/li&gt;
  &lt;li&gt;&amp;lt;= Wednesday’s class for the TQ1 next week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Today&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Measures of Symmetry&lt;/li&gt;
  &lt;li&gt;Measures of Kurtosis&lt;/li&gt;
  &lt;li&gt;Applications&lt;/li&gt;
  &lt;li&gt;Measures of Association&lt;/li&gt;
  &lt;li&gt;Graphical Measures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objective: To figure out the shape of our sample&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Centre: sample mean&lt;/li&gt;
  &lt;li&gt;Variability: This measures how much the data set is spread out across the centre; how volatile the data set is; Use s&lt;sup&gt;2&lt;/sup&gt;, variance; Standard deviation is the sqrt(variance)
    &lt;ul&gt;
      &lt;li&gt;If y=a+bx, s&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;y&lt;/sub&gt; = b^2s^2_x s_y = abs(b)s_x&lt;/li&gt;
      &lt;li&gt;The variance treats data on either side of the mean symmetrically&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Symmetry:
    &lt;ul&gt;
      &lt;li&gt;3 shapes:
        &lt;ul&gt;
          &lt;li&gt;Symmetric&lt;/li&gt;
          &lt;li&gt;Right-skewed (mode is on the left side, mean is on the right side), long right tail&lt;/li&gt;
          &lt;li&gt;Left-skewed (mode is on the right side, mean is on the left side), long left tail&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Measure of Skewness:
        &lt;ul&gt;
          &lt;li&gt;Quick estimate of skewness:&lt;br /&gt;
  e.g. 1, 3, 5, 7, 9, 11, 13&lt;br /&gt;
  Symmetric Data -&amp;gt; Mean = Median&lt;br /&gt;
  e.g. 1, 3, 5, 7, 9, 11, 10&lt;sup&gt;7&lt;/sup&gt;
  Mean » Median&lt;br /&gt;
  Measure of Skewness = Mean - Median
            &lt;ul&gt;
              &lt;li&gt;if &amp;gt; 0, right-skewed, mean greater than median&lt;/li&gt;
              &lt;li&gt;if &amp;lt; 0, left-skewed, mean less than median&lt;/li&gt;
              &lt;li&gt;if = 0, symmetric&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications&lt;/strong&gt;&lt;br /&gt;
Gould: “The median is not the message”&lt;br /&gt;
“Abdominal mesothalamia”: median of life expectancy after diagnosis = 8 months&lt;/p&gt;

&lt;p&gt;If the distribution (of frequency of death against time since diagnosis) is symmetric, then he will die within 16 months at best.&lt;/p&gt;

&lt;p&gt;The actual distribution is right-skewed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kurtosis&lt;/strong&gt;&lt;br /&gt;
Kurtosis measure how frequent extreme observations are, with respect to the Normal Distribution.&lt;/p&gt;

&lt;p&gt;Kurtosis checks whether the data set has “fatter” tails compared to the Normal distribution.&lt;/p&gt;

&lt;p&gt;Kurtosis: how much “peakedness” the graph has&lt;/p&gt;

&lt;p&gt;For a normal distribution, kurtosis = 3. If k for your data &amp;gt; 3, then it has fatter tails compared to the normal. If it is &amp;lt; 3, then it has narrower tails.&lt;/p&gt;

&lt;p&gt;Kurtosis checks whether we can apply the Normal Distribution assumption to our data set by comparing our sample kurtosis to 3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Measures of Association&lt;/strong&gt;&lt;br /&gt;
Objective: To find whether there is any evidence of association between two variables&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Categorical Variables
    &lt;tr&gt;&lt;td&gt;lmao&lt;/td&gt;
      &lt;td&gt;ayy&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;hey&lt;/td&gt;&lt;/tr&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Relative Risk&lt;/strong&gt;: measures the association between two catgorical variables; Measured by [R.R.]&lt;/li&gt;
      &lt;li&gt;A and B are indepedent iff P(A|B) = P(A)&lt;/li&gt;
      &lt;li&gt;If R.R. is approximately equal to 1, then there is little evidence of association&lt;/li&gt;
      &lt;li&gt;If R.R. &amp;gt; &amp;gt; 1 or &amp;lt; &amp;lt; 1, evidence of association&lt;/li&gt;
      &lt;li&gt;But how high is too high? UNANSWERED QUESTION&lt;/li&gt;
      &lt;li&gt;The table = Two Way Contingency Table&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Numerical Variables&lt;br /&gt;
How to find a measure of association between two numerical variables?
    &lt;ul&gt;
      &lt;li&gt;Sample Correlation Coefficient r&lt;sub&gt;xy&lt;/sub&gt;: the sign of r tells us the direction of the relationship, and the value of r tells us the strength of the association/relationship&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E.g. &lt;br /&gt;
x&lt;sub&gt;i&lt;/sub&gt; = # of beers you drink&lt;br /&gt;
y&lt;sub&gt;i&lt;/sub&gt; = STAT 231 mark&lt;br /&gt;
Collect a data set:&lt;br /&gt;
{x1, y1},…{xn, yn}&lt;/p&gt;

&lt;p&gt;So it is most likely that if xn - x average &amp;gt; 0, yn - y average &amp;lt; 0&lt;/p&gt;

&lt;p&gt;Thus, the numerator tells us the direction of the relationship. The denominator ensures that -1 &amp;lt;= r&lt;sub&gt;xy&lt;/sub&gt; &amp;lt;= 1&lt;/p&gt;

&lt;p&gt;The closer abs(r_xy) is to 1, the strong is the evidence of association.&lt;/p&gt;

&lt;p&gt;r captures the &lt;strong&gt;linear relationship&lt;/strong&gt; between x and y. Not good in capture non-linear relationship&lt;/p&gt;

&lt;p&gt;E.g. y = x&lt;sup&gt;2&lt;/sup&gt;, x=-3, y=9, x=-1, y=1, x=1, y=1, x=3, y=9.  r_xy = 0 !!! It’s a function so the two variables are associated for sure, but the Coefficient gives 0. Does not work well with quadratic relationships, or non-linear in general.&lt;/p&gt;

&lt;p&gt;E.g. y = ax + b. r_xy = 1 if a &amp;gt; 0, = -1 if a &amp;lt; 0&lt;/p&gt;

&lt;p&gt;Since we are going from sample to population, we can only find evidence of association. Strong correlation != Causation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graphical Measures&lt;/strong&gt;&lt;br /&gt;
+ Density Histogram: Histogram -&amp;gt; grouped data; Density histogram -&amp;gt; area of every rectangle = relative frequency of the group
+ Empirical cdf&lt;br /&gt;
+ Box Plot&lt;br /&gt;
+ Scatter Plot&lt;br /&gt;
+ Q-Q Plot&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-11-2016---lecture-4&quot;&gt;May 11, 2016 - Lecture 4&lt;/h2&gt;

&lt;p&gt;A note about TQ1 will be posted on LEARN tonight -&amp;gt; Up to today’s material (Ignore the last question on the sample quiz)&lt;/p&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Centre -&amp;gt; Sample Mean&lt;/li&gt;
  &lt;li&gt;Variability -&amp;gt; Variance, Standard Deviation&lt;/li&gt;
  &lt;li&gt;Symmetry -&amp;gt; Mean - Median&lt;/li&gt;
  &lt;li&gt;Kurtosis -&amp;gt; Compare to Normal Distribution&lt;/li&gt;
  &lt;li&gt;Correlation Coefficient: r&lt;sub&gt;xy&lt;/sub&gt; measures association&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reasons-why-we-care-about-graphical-summaries&quot;&gt;Reasons why we care about Graphical Summaries&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;To “identify” the distribution from which the data is drawn,&lt;/li&gt;
  &lt;li&gt;To find the shape of the data set&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-five-number-summary&quot;&gt;The Five Number Summary&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Minimum&lt;/li&gt;
  &lt;li&gt;Q1&lt;/li&gt;
  &lt;li&gt;Q2&lt;/li&gt;
  &lt;li&gt;Q3&lt;/li&gt;
  &lt;li&gt;Maximum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These five numbers provide the rough shape of the graph&lt;/p&gt;

&lt;p&gt;Correlation Coefficient measures the linear association between two variables&lt;/p&gt;

&lt;h2 id=&quot;graphical-summary&quot;&gt;Graphical Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Histogram&lt;/strong&gt;: Grouped Data
Example: Group Freq (The cohorts are called bins)&lt;br /&gt;
&lt;strong&gt;Frequency Histogram&lt;/strong&gt;: Frequency as y-axis, and bins as x-axis (Bar graph)&lt;br /&gt;
&lt;strong&gt;Density Histogram&lt;/strong&gt;: x-axis = bins, y-axis = densities&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The length(height) of each rectangle in a density histogram is chosen such that the area of the rectangle is equal to the relative frequency of the bin&lt;/li&gt;
  &lt;li&gt;To construct a density histogram:
Find the frequency and relative frequency for each bin; Relative Frequency = frequency for the bin / total frequency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason why we draw density histogram is that &lt;strong&gt;we want to compare our data (shape of graph) with known density functions of distributions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Box Plot&lt;/strong&gt;: Box and Whiskers Plot&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lower end of the box/rectangle -&amp;gt; Q1&lt;/li&gt;
  &lt;li&gt;Upper end of the box/rectangle -&amp;gt; Q3&lt;/li&gt;
  &lt;li&gt;The line inside the box -&amp;gt; Median = Q2&lt;/li&gt;
  &lt;li&gt;The upper whisker goes up to the maximum of the data set, that is &lt;strong&gt;NOT AN OUTLIER&lt;/strong&gt; (extreme observations; a data point y&lt;sub&gt;i&lt;/sub&gt; is an outlier if y&lt;sub&gt;i&lt;/sub&gt; &amp;gt; Q3 + 1.5IQR or y&lt;sub&gt;i&lt;/sub&gt; &amp;lt; Q1 - 1.5IQR; Remember IQR = Q3-Q1); The upper whisker ends at the highest value of your data set that is lower than the outliers; We mark the outliers each and every one of them separately&lt;/li&gt;
  &lt;li&gt;The lower whisker goes down to the minimum of the data set, that is not an outlier&lt;/li&gt;
  &lt;li&gt;The Box Plot gives us the &lt;strong&gt;Five Number Summary&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Reading the Box Plot sideways gives the rough shape and the skewness of the distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Empirical cdf (Cumulative Distribution Function)&lt;/strong&gt;&lt;br /&gt;
Definition: F(y) = # of observations &amp;lt;= y / Total # of observations, and the plot (y, F(y)) is called the empirical cdf.&lt;/p&gt;

&lt;p&gt;{1, 3, 5, 5, 9}, F(0) = 0, F(1) = 0.2, F(3) = 0.4 … the plot of a step function&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can find a lot of info from the empirical cdf&lt;/li&gt;
  &lt;li&gt;F(median) = 1/2, we can identify any percentile&lt;/li&gt;
  &lt;li&gt;The number with the biggest jump vertically on the graph is the mode of this data set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q-Q Plot&lt;/strong&gt;&lt;br /&gt;
We want to check whether our data set “resembles” a Normal Distribution. The Q-Q plot plots the alpha-th quantile of your sample to the alpha-th quantile of Z Distribution ~N(0, 1); Plots two quantiles: Sample quantiles against the theoretical quantiles&lt;/p&gt;

&lt;p&gt;{1, 2, 7, …, 155}&lt;/p&gt;

&lt;p&gt;Z(alpha) on the x-axis, y(alpha) on the y-axis. 0 = median and mean of Z&lt;/p&gt;

&lt;p&gt;If the Q-Q Plot is a straight line, then the data resembles the Normal Distribution Z&lt;/p&gt;

&lt;p&gt;Q: If we have a distribution that is normal, how do we prove that it will have a straight line Q-Q plot?&lt;br /&gt;
That is, y~N(mu, sigma^2), the Q-Q plot will be a straight line&lt;/p&gt;

&lt;p&gt;Proof:?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scatter Plot&lt;/strong&gt;&lt;br /&gt;
Scatter Plot checks for association. Just plot (xi, yi).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-16-2016---lecture-5&quot;&gt;May 16, 2016 - Lecture 5&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PPDAC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;typical problem: we have a population of observations, the characteristics of the population is unknown&lt;/li&gt;
  &lt;li&gt;We draw a sample, and based on the sample observations infer properties about the population (statistical inference)&lt;/li&gt;
  &lt;li&gt;Examples: 1. we want to find the approval rating of Trump among likely US voters; 2. Average income of a starting math undergraduate career in Canada; 3. Does a regular intake of Vitamin C reduce the duration of a flu? 4. Are Canadian Jeopardy contestants better than Americans?&lt;/li&gt;
  &lt;li&gt;PPDAC approach gives you an algorithm to tackle statistical problems that are mentioned above; PPDAC = Problem, Plan, Data, Analysis, Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problem: Descriptive, Causative, Predictive&lt;/strong&gt;&lt;br /&gt;
  + Descriptive: We are interested in some unknown characteristic of the population (e.g. Trump)
  + Causative: Whether a variable X causes a variable Y to change (e.g. Vitamin C)
  + Predictive: To estimate the future values of some variable (e.g. predicting Blackberry stock prices)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target Population&lt;/strong&gt;: the population of interest (e.g. All likely US voters in the Trump example)&lt;br /&gt;
&lt;strong&gt;Unit&lt;/strong&gt;: each member of the population&lt;br /&gt;
&lt;strong&gt;Variate&lt;/strong&gt;: a characteristic of the unit (e.g. whether the voter approves or disapproves of Trump)&lt;br /&gt;
&lt;strong&gt;Attribute&lt;/strong&gt;: a function of the variate (e.g. Proportion of approvals = Attribute)&lt;/p&gt;

&lt;p&gt;For the income of math undergrad problem, each individual income is the variate.&lt;br /&gt;
Average income is the attribute.&lt;/p&gt;

&lt;p&gt;Typically, we want to find some attributes of the population.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Study Population&lt;/strong&gt;: the set of observations from which your sample is drawn&lt;br /&gt;
Example: Suppose we are doing phone interviews -&amp;gt; study population would be all voters with a phone; In medical tests, study population might not be a subset of the target population&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experimental Plan: Some of the variates can be controlled by the analyst with dependent and independent variables&lt;/li&gt;
  &lt;li&gt;Observational Plan: The variates are not under the analyst’s control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;br /&gt;
Setting up a statistical model: we assume that the data is drawn from known distribution with unknown parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bias: systematic error -&amp;gt; make sure the data is not biased&lt;/li&gt;
  &lt;li&gt;Measurement error: random error -&amp;gt; measured value - actual value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Population parameters, usually Greek letters, are unknown. Sample parameters, usually Latin letters, are known (sample mean, sample variance).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Random Sampling&lt;/strong&gt;&lt;br /&gt;
Sampling protocol: we want the sample to represent the population&lt;br /&gt;
Sampling techniques: methods of drawing the “right” sample&lt;br /&gt;
Errors: The difference between the target and the study populations = &lt;strong&gt;Study Error&lt;/strong&gt;; Difference between the study population and the sample = &lt;strong&gt;Sampling Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Difference in the value of the attribute between the Total Population and the Study Population is the study error. Difference in the value of the attribute between the Study Population and the Sample is the sampling error. We want to quantify the sampling error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br /&gt;
We want to make sure that the conclusion is understood by non-statisticians&lt;/p&gt;

&lt;p&gt;##The Theory of Estimation##
&lt;strong&gt;Method of Maximum Likelihood&lt;/strong&gt;&lt;br /&gt;
Based on our sample, what is the mostly likely value of the unknown parameter? This is a question every statistician asks. Example: We have a biased coin. The probability of getting a head is either 1/2 or 1/3. Toss the coin 100 times and we see 25 heads. We choose the value of the parameter that maximizes the probability of observing your sample.&lt;/p&gt;

&lt;p&gt;Suppose Y is a discrete distribution with a pf f and an unknown parameter theta. Data = {y1, …, yn}.&lt;br /&gt;
L(theta; y1, … , yn) = Likelihood Function = P(Y1 = y1, Y2 = y2, … , Yn = yn) as a function of theta; the chance of observing the sample&lt;/p&gt;

&lt;p&gt;E.g. Number of accidents ~ Poi(mu), with mu unknown. Sample is {1, 0, 2, 5, 7}. Based on the sample, what is the MLE (Maximum Likelihood Estimate) for mu? Use the pf for the Poisson distribution to calculate the probability of observing each unit in the sample. Multiply them together. The value of mu that maximizes L above is called the MLE. In the above example, L = e^-5mu* mu^15 / 1!0!…7!. In order to maximize it, take the log(base e) function and maximize the log function. Take derivatives and equate it to zero, solve for mu (MLE). log L = l = log-likelihood function. In the above example, mu = 3&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-18-2016---lecture-6&quot;&gt;May 18, 2016 - Lecture 6&lt;/h2&gt;

&lt;p&gt;##Estimation##&lt;/p&gt;

&lt;p&gt;We are interested in some unknown characteristics (attributes) of the population. We draw a random, independent sample from this population {y1,…,yn}. Based on these sample observations, we want to come up with the best estimate for the unknown characterstic g(y1,…,yn) will be my best guess for theta.&lt;/p&gt;

&lt;p&gt;Some starting points&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ usually, all statistical inference problems start with some estimation of some parameter.
+ {y1,...,yn} -&amp;gt; sample
+ we think of the data points {y1,...,yn} as outcomes of some random variable Y (statistical model); We assume that the data is drawn from some distribution with unknown parameters
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Example: toss a coin; objective: estimate pi = P(head). Each data point yi can be thought of as an outcome of Yi. The distribution of Yi is called the &lt;strong&gt;Statistical Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;##Steps Involving Estimation##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identify the distribution from which your data set is drawn&lt;/li&gt;
  &lt;li&gt;Construct the likelihood function L(theta; y1,…,yn) = P(Y1=y1,…Yn=yn) = Probability of observing your sample = P(Y1=y1)&lt;em&gt;…&lt;/em&gt;P(Yn=yn)&lt;/li&gt;
  &lt;li&gt;Find the MLE (best guess for the unknown parameter). Theta hat is that value of theta that maximizes the likelihood function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example 1: To estimate the approval rating of Trump. Approved Rating = pi (Population proportion, unknown). Sample = {YYNNNNYNNN} Given this sample, what is pi hat, the MLE for pi? Y is either Yes with probability pi, or No with probability 1-pi&lt;/p&gt;

&lt;p&gt;L(pi; y1,…yn) = pi&lt;em&gt;pi&lt;/em&gt;(1-pi)&lt;em&gt;…&lt;/em&gt;(1-pi) = pi^3 * (1-pi)^7 is the Maximum Likelihood Function. The value of pi that maximizes the function is pi hat = MLE. The log likelihood function is l(pi) = 3ln(pi) + 7ln(1-pi), take derivative, find maximum value of pi = 0.3&lt;/p&gt;

&lt;p&gt;Example 2: Objective: To estimate mu, the average number of hits on your blog in an hour. A sample of n hours {y1,…,yn}. What is mu hat, the MLE for mu? We will assume that the data is drawn from a Poisson distribution. L(mu, y1,…yn) = P(Y=y1)*…P(Y=yn). Calculating mu hat, we get mu hat = 1/n(sigma yi) = y average&lt;/p&gt;

&lt;p&gt;Example 3: To estimate pi = prob that a Canadian contestant wins Jeopardy. Sample = {y1,…,yn} yi = number of shows contestant i appeared in. Sample = {1,2,1,3,5}. The data in this problem is drawn from a Geometric distribution. P(Y=2) = pi(1-pi). P(Y=4) = pi^3(1-pi). L(pi; y1,…yn) = pi^[(sigma yi)-n] * (1-pi)^n. Take log derivatives and equate it to zero. Get pi hat.&lt;/p&gt;

&lt;p&gt;Example 4: To estimate the proportion of southpaws at UW.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ Strategy 1: Go interview people till we get 10 left handers, interviewed 100 people
+ Strategy 2: Go interview 100 people and 10 of them are left handers
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Strategy 1: pi = proportion of left handers. L(pi) = C^99_9&lt;em&gt;pi^9&lt;/em&gt;(1-pi)^90 * pi&lt;br /&gt;
Strategy 2: L(pi) = C^100_10&lt;em&gt;pi^10&lt;/em&gt;(1-pi)^90&lt;/p&gt;

&lt;p&gt;So pi hat in both cases are 1/10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some Final Points&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For complete analysis, we have to make sure theta hat is indeed the maximum (check the 2nd order condition)&lt;/li&gt;
  &lt;li&gt;L(theta; y1,…,yn) = P(Y1=y1)&lt;em&gt;…&lt;/em&gt;P(Yn=yn) = f(y1)*…*f(yn). f = distribution function = pi(f(yi))&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since the likelihood function is a product of the probabilities, the value can be really small for large sample sizes.&lt;br /&gt;
R(theta) = Relative Likelihood Function = L(theta)/L(theta hat), where theta hat = MLE. The graph of R(theta) against theta is bell-shaped, maximized at theta hat. 0&amp;lt;=R(theta)&amp;lt;=1, R hits its maximum at theta = theta hat = MLE&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-25-2016---lecture-7-2016&quot;&gt;May 25, 2016 - Lecture 7, 2016&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syllabus for the Midterm&lt;/strong&gt;: &amp;lt;= End of this week + STAT 230; Fall 2015 Midterm and practice problems posted (solutions will be posted this Friday)&lt;/p&gt;

&lt;p&gt;##Today##
+ Overview of statistical modelling, estimatation and the MLE calculation
+ Likelihood functions and the MLE for continuous r.v.s
+ Invariance property of the MLE
+ Special case -&amp;gt; Uniform distribution&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paul the Octopus Problem&lt;/strong&gt;&lt;br /&gt;
+ Toss a coin 100 times. Your friend “guesses” right 70 times. Is there evidence that your friend has ESP?
+ What is the attribute of interest? (What do we care about the population we are looking at?)
+ We are trying to find pi, the probability(your friend will guess right); it is unknown
+ y = number of successes in 100 trials, y = 70 -&amp;gt; outcome of some r.v. Y. Data points are not just numbers, but outcomes of a random experiment
+ We need to construct a statistical model (assuption on the distribution Y)
+ In this case, Y~Bin(100, pi)&lt;/p&gt;

&lt;p&gt;##Statistical Model##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construct the likelihood function&lt;/li&gt;
  &lt;li&gt;L(pi) = C^100_70 pi^70(1-pi)^30&lt;/li&gt;
  &lt;li&gt;Find the MLE(we choose pi hat which maximizes L(pi)), pi hat = 0.7&lt;/li&gt;
  &lt;li&gt;We choose that value of the parameter that maximizes the chance of what we observed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Formal Definition&lt;/strong&gt;: Yi = f(theta;yi), i=1,…,n, f=distribution function, Yi’s are independent, {y1,…,yn} -&amp;gt; data set&lt;/p&gt;

&lt;p&gt;L(theta;y1,y2,…,yn) = n Pi i=1 f(theta;yi) Product of the Distribution functions evaluated at the sample points&lt;/p&gt;

&lt;p&gt;Example: {y1,…,yn} is independently drawn from yi&lt;br /&gt;
f(y;theta) = (1-theta)^y * theta; y = 0,1,2,…&lt;/p&gt;

&lt;p&gt;##Continuous Distributions##&lt;/p&gt;

&lt;p&gt;Definition: Model: Yi~f(yi;theta) where Yi is a continuous random variable with unknown parameter theta&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Objective: To estimate mu = average lifetime of a lightbulb produced by a company. An independent sample {y1,…,yn} is drawn. Based on this sample, what is mu hat?&lt;/p&gt;

&lt;p&gt;Model: Yi~Exp(mu), i=1,..,n, Yi’s are independent; L(mu, yi,…,yn) = i/mu^n e^(-1/u sigma yi). Take ln, take derivative, equate to zero; get mu hat = y average&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Objective: To estimate mu = population average IQ of UW Math students; sigma^2 = variance of the IQ&lt;/p&gt;

&lt;p&gt;An independent sample {y1,y2…,yn} is drawn. Based on the sample, what are sigma^2 hat and mu hat?&lt;/p&gt;

&lt;p&gt;Solution: Model: Yi~N(mu, sigma^2), assuming normality, i=1,…,n, Yi’s independent&lt;/p&gt;

&lt;p&gt;Likelihood function: Take partial derivatives: first with respect to mu, get mu hat = y average (If the distribution is Normal, then y average is the MLE for mu); then take partial derivative with respect to sigma, get sigma^2 hat = 1/n sigma(yi - y average)^2. The MLE for population mean is the sample mean, but the population variance is NOT the sample variance (which is 1/n-1 instead of 1/n)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Suppose {y1,…,yn} is drawn from a random variable with density function f(theta;y) = 2y/theta e^(-(y^2)/theta), with y&amp;gt;0, theta&amp;gt;0. L(theta) = (2^n(y1y2…yn))/theta^n e^(-1/theta sigma yi^2), take ln, l(theta) - ln K - nln(theta) - 1/theta sigma yi^2. Take derivative, get theta hat = 1/n sigma yi^2&lt;/p&gt;

&lt;p&gt;##Invariance Property##&lt;/p&gt;

&lt;p&gt;Result: If theta hat is the MLE (best guess for theta) for theta, then g(theta hat) is the MLE for g(theta) for any continuous g&lt;/p&gt;

&lt;p&gt;Example: The scores of STAT231 are normally distributed with mean mu and variance sigma^2. Find the estimate for the 95-th percentile of the population. Looking at the Z table, 95-th percentile corresponds to 1.64. &lt;br /&gt;
P(Y&amp;lt;=x) = 0.95&lt;br /&gt;
P((Y-mu)/sigma &amp;lt;= (x-mu)/sigma) = 0.95&lt;br /&gt;
P(Z&amp;lt;=x-mu/sigma) = 0.95&lt;br /&gt;
x-mu/sigma = 1.64&lt;br /&gt;
x = mu + 1.64 sigma&lt;/p&gt;

&lt;p&gt;MLE for the 95th percentile = mu hat + 1.64 sigma hat. Find mu hat and sigma hat, plug in, done.&lt;/p&gt;

&lt;p&gt;Example: Suppose we toss a coin 60 times, and we observe 20 successes (heads). Find the MLE for the variance of this distribution. pi hat = 1/3&lt;br /&gt;
Var = n&lt;em&gt;pi(1-pi), Mean = n&lt;/em&gt;pi&lt;/p&gt;

&lt;p&gt;##Uniform Distribution##&lt;/p&gt;

&lt;p&gt;Yi~U[0,theta], theta is unknown. {yi,…,yn} What is theta hat? U[a,b], pf = 1/(b-a). f(y;theta) = 1/theta if 0&amp;lt;y&amp;lt;theta and 0 otherwise. Then L(theta) = 1/theta^n if 0&amp;lt;=yi&amp;lt;=theta for all i (or can be written as “if theta &amp;gt;= max{yi,…,yn}”), or 0 otherwise. But the graph is not continuous at max{y1,…,yn}. MLE theta hat = max{y1,…,yn}&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/2016/05/02/Stat-231.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/2016/05/02/Stat-231.html</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>PSYCH 101 - Introductory Psychology</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PSYCH 101 - Introductory Psychology
Instructor: Dr. John Campbell
Location: AL 116
Time: Mondays 6:30pm - 9:20pm
Term: Spring 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;may-2-2016---lecture-1&quot;&gt;May 2, 2016 - Lecture 1&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Psychology = Study of the behaviour and the mind&lt;/strong&gt;&lt;br /&gt;
Behaviour = actions and responses
Mind = internal states and processes, such as thoughts and feelings&lt;/p&gt;

&lt;p&gt;Psychology is a science. It is a systematic gathering and evaluating of empirical evidence.&lt;/p&gt;

&lt;p&gt;Subfields: Biopsychology, developmental, experimental, industrial-organizational, personality, social etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 Central Goals of Psychology&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Describe how people and animals behave&lt;/li&gt;
  &lt;li&gt;Explain and understand causes of these behaviours&lt;/li&gt;
  &lt;li&gt;Predict behaviours under certain conditions&lt;/li&gt;
  &lt;li&gt;Influence/Control behaviours through knowledge and control of its causes to enhance human welfare&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Psychology can be made up of different perspectives.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-structuralism-perspective&quot;&gt;The Structuralism Perspective&lt;/h1&gt;

&lt;p&gt;Wilhelm Wundt -&amp;gt; First psychology lab with Titchener -&amp;gt; Founded the &lt;strong&gt;Structuralism&lt;/strong&gt; approach&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mind -&amp;gt; studied by breaking it into basic components&lt;/li&gt;
  &lt;li&gt;Used “introspection” to study sensations&lt;/li&gt;
  &lt;li&gt;Gave way to &lt;strong&gt;functionalism&lt;/strong&gt; (functions of consciousness)&lt;/li&gt;
  &lt;li&gt;“Describe inner experiences”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-functionalism-perspective&quot;&gt;The Functionalism Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Our hands -&amp;gt; “Why do we have hands”&lt;/li&gt;
  &lt;li&gt;Ask similar questions about mental processes and behaviours&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-psychodynamic-perspective&quot;&gt;The Psychodynamic Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Searches for causes of behaviours within the inner workings of our personality&lt;/li&gt;
  &lt;li&gt;Emphasizes the role of consciousness&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Psychoanalysis&lt;/strong&gt; is the analysis of internal and primarily unconscious psychological forces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-behavioural-perspective&quot;&gt;The Behavioural Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Focuses on the role of the external environment in governing our actions&lt;/li&gt;
  &lt;li&gt;John Locke -&amp;gt; Tabula Rasa -&amp;gt; Human nature is shaped by our environment&lt;/li&gt;
  &lt;li&gt;Notable figures: Pavlov, Thorndike, Watson (Little Albert experiment), Skinner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-humanistic-perspective&quot;&gt;The Humanistic Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Emphasizes free will, personal growth, self-actualization, and the attempt to find meaning in one’s existence&lt;/li&gt;
  &lt;li&gt;Rejects psychodynamics&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Postive Psychology Movement&lt;/strong&gt; -&amp;gt; focusing on strengths and fulfillments&lt;/li&gt;
  &lt;li&gt;Notable figures: Maslow (Hierarchy of Needs), Rogers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-cognitive-perspective&quot;&gt;The Cognitive Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Examines nature of mind&lt;/li&gt;
  &lt;li&gt;Perceptions are organized so that “the whole is greater than the sum of its parts”&lt;/li&gt;
  &lt;li&gt;How mental processes influence behaviours&lt;/li&gt;
  &lt;li&gt;Notable figures: Ebbinghaus -&amp;gt; Gestalt Psychology (1920s)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gestalt&lt;/strong&gt; = perception and problem solving
    &lt;ul&gt;
      &lt;li&gt;figure-ground&lt;/li&gt;
      &lt;li&gt;closure&lt;/li&gt;
      &lt;li&gt;proximity&lt;/li&gt;
      &lt;li&gt;similarity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;modern-cognitive-psychology&quot;&gt;Modern Cognitive Psychology&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Notable figure: Elizabeth Loftus&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Misinformation Effect&lt;/strong&gt; -&amp;gt; Impacts eyewitness memory and testimony&lt;/li&gt;
  &lt;li&gt;Factors can distort memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-9-2016---lecture-2&quot;&gt;May 9, 2016 - Lecture 2&lt;/h2&gt;

&lt;h1 id=&quot;the-socialcultural-perspective&quot;&gt;The Socialcultural Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Examines how the social environment and culturla learning influence our behaviour, thoughts, and feelings&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Social Psychology Component&lt;/strong&gt; - how the presence of other people influence our behaviour, thoughts, and feelings&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cultural Component&lt;/strong&gt; - Enduring values, beliefs, behavious, and traditions that are shared by a large group of people and passed from one generation to the next Ex. Individualism vs. Collectivism&lt;/li&gt;
  &lt;li&gt;Asch Experiment - influence the presence of others will have on our decision-making (conformity)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-biological-perspective&quot;&gt;The Biological Perspective&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Examines how brain processes and other bodily functions regulate behaviour&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Behavioural Neuroscience&lt;/strong&gt; - examines brain processes and other physiological functions that underlie our behaviours, sensory experiences, emotions, and thoughts&lt;/li&gt;
  &lt;li&gt;Notable figures: Lashley, Scoville, Milner, Hebb&lt;/li&gt;
  &lt;li&gt;Most famous person: patient H.M. (memory loss)
    &lt;ul&gt;
      &lt;li&gt;to alleviate seizures related to epilepsy, had brain surgery&lt;/li&gt;
      &lt;li&gt;no more seizures, but caused him to have amnesia (wasn’t able to create new memories)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Another example: Capgras Syndrome&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-2---studying-behaviour-scientifically&quot;&gt;Chapter 2 - Studying Behaviour Scientifically&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Scientific attitudes&lt;/li&gt;
  &lt;li&gt;Scientific process&lt;/li&gt;
  &lt;li&gt;Types of variables&lt;/li&gt;
  &lt;li&gt;Correlational research&lt;/li&gt;
  &lt;li&gt;Experimental research&lt;/li&gt;
  &lt;li&gt;Statistics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scientific Attitudes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kitty Genovese Murder (1964) - Bystander Apathy&lt;/li&gt;
  &lt;li&gt;Darley &amp;amp; Latane: Why would nobody call the police? Was there something more going on here?&lt;/li&gt;
  &lt;li&gt;Darley &amp;amp; Latane:
    &lt;ul&gt;
      &lt;li&gt;Rather than apaty, perhaps it was “diffusion of responsibility”&lt;/li&gt;
      &lt;li&gt;Created an if-then question&lt;/li&gt;
      &lt;li&gt;In an emergency, IF multiple bystanders are present, THEN the likelihood that any one bystander will intervene is reduced&lt;/li&gt;
      &lt;li&gt;They designed an experiment to test their hypothesis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Correlational Method&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Study relationships between variables&lt;/li&gt;
  &lt;li&gt;Variable: anything that can be measured&lt;/li&gt;
  &lt;li&gt;E.g. more smokes, more cancer; higher IQ, more money&lt;/li&gt;
  &lt;li&gt;Relationship between variables is shown by a statistic, the &lt;strong&gt;correlation coefficient (r)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;r can be anything between -1.0 and +1.0 (STAT 231 amirite)&lt;/li&gt;
  &lt;li&gt;Examples: marijuana and GPA; marijuana and junk food consumption; GPA and height&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Methods of Research&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Correlational Research&lt;/li&gt;
  &lt;li&gt;Experimental&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Case Studies&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An in-depth analysis of an individual a group, or an event&lt;/li&gt;
  &lt;li&gt;Data may be gathered through observation, interviews, psychological tests, task performances, physiological recordings, or archival records&lt;/li&gt;
  &lt;li&gt;Examples of key case studies: H.M., Phineas Gage&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Allows for the study of rare phenomenon&lt;/li&gt;
      &lt;li&gt;A case study may challenge the validity of a theory or a widely held scientific belief&lt;/li&gt;
      &lt;li&gt;Can be a source of new ideas and hypotheses that can be further investigated through controlled experiments&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not just people, events as well&lt;/li&gt;
  &lt;li&gt;Examples: Flashbulb memories (Assassination of JFK, the Challenger Explosion, Death of Diana, 9/11)&lt;/li&gt;
  &lt;li&gt;Monumental events that impact a large group of people&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Limitations&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Poor method for determining “cause-effect”&lt;/li&gt;
      &lt;li&gt;Case studies may not generalize to other people’s situations&lt;/li&gt;
      &lt;li&gt;Observers may not be objective in gathering and interpreting the data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We should be skeptical about case studies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hemispheric lateralization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our brains have left and right cerebral hemispheres&lt;/li&gt;
  &lt;li&gt;Left brain vs. Right brain&lt;/li&gt;
  &lt;li&gt;Lateralization - refers to the relatively greater location of a function in one hemisphere or the other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-16-2016---lecture-3&quot;&gt;May 16, 2016 - Lecture 3&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Neural Bases of Behaviour&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brain: 3 lbs, mass of tissue made of neurons&lt;/li&gt;
  &lt;li&gt;Neurons = building blocks of the nervous system&lt;/li&gt;
  &lt;li&gt;100 Billion neurons at birth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Neuron Structures etc.&lt;/strong&gt; - Soma, Dendrites, axons, myelin sheath, node of Ranvier&lt;br /&gt;
&lt;strong&gt;Synaptic Transmission&lt;/strong&gt; - synaptic vesicles, axon terminal, postsynaptic membrane&lt;/p&gt;

&lt;p&gt;##Brain##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cerebral Cortex: outermost layer
    &lt;ul&gt;
      &lt;li&gt;Many connections&lt;/li&gt;
      &lt;li&gt;frontal (motor cortex, complex cognition), temporal (auditory, language), occipital (visual), parietal (sensory)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Broca’s and Wernicke’s Area&lt;/li&gt;
  &lt;li&gt;Aphasia (Broca’s, Wernicke’s) - Partial/Total loss of the ability to communicate&lt;/li&gt;
  &lt;li&gt;Neural Plasticity - the ability for neurons to change in structure and function; brain alterations begin in the uterus and continues throughout life; impacted by genetic factors and environment&lt;/li&gt;
  &lt;li&gt;Synesthesia - one type of stimulation evokes the sensation of another&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-27-2016---term-test-1-review&quot;&gt;May 27, 2016 - Term Test 1 Review&lt;/h2&gt;
&lt;p&gt;## Chapter 1 ##&lt;/p&gt;

&lt;p&gt;Psychology = scientific study of behaviour (actions/responses that we can directly observe) and the mind (internal states and processes; must be inferred)&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/2016/05/02/Psych-101.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/2016/05/02/Psych-101.html</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>MUSIC 140 - Popular Music and Culture</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MUSIC 140 - Popular Music and Culture
Instructor: Simon Wood
Section: 001
Location: STP 105
Time: Thursdays 7:00pm - 9:50pm
Term: Spring 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;may-5-2016---lecture-1&quot;&gt;May 5, 2016 - Lecture 1&lt;/h2&gt;

&lt;h3 id=&quot;what-is-popular-music&quot;&gt;What is Popular Music?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Dependent on the development of
    &lt;ol&gt;
      &lt;li&gt;Different from “folk” and “art” music genres&lt;/li&gt;
      &lt;li&gt;The Industrial Revolution changes the system of barter economy to a system of monetary currency (also contributed to 3, the Middle Class, and 4, the growth of urban populations)&lt;/li&gt;
      &lt;li&gt;The Emergence of the Middle Class, who possesses &lt;strong&gt;disposable income&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Large Urban Populations (as a result of the rural-to-urban shift)&lt;/li&gt;
      &lt;li&gt;Copyright Law -&amp;gt; music itself is an &lt;strong&gt;idea&lt;/strong&gt; (Law originated from Queen Mary, who also started stationary companies; musicians have to register and sell royalty)&lt;/li&gt;
      &lt;li&gt;Technologies of mass production and broadcasting -&amp;gt; records&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By 1945:
    &lt;ol&gt;
      &lt;li&gt;End of the “Big Band” era&lt;/li&gt;
      &lt;li&gt;Big Band had dominated the music industry since the mid 30s&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Example: “Sentimental Journey” (Doris Day, 1944), focuses on instrumental, performed by Les Brown and His Band of Renown&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Significant figures: Boney Goodman, Count Basie, Duke Ellington, Tommy Dorsey&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Returning to focus on vocalist&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;The music industry divided into 3 distinct categories:
        &lt;ol&gt;
          &lt;li&gt;Popular(Pop): White/Middle Class/Urban&lt;/li&gt;
          &lt;li&gt;Race: Black, regardless of class or location&lt;/li&gt;
          &lt;li&gt;Hillbilly: Origins in poor, white, rural -&amp;gt; now migrating to urban areas (particular in Southern US) -&amp;gt; Country&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Products of the music industry were sheet music and recordings&lt;/li&gt;
      &lt;li&gt;Sheet music dominated recordings until the the late 1920s&lt;/li&gt;
      &lt;li&gt;While sheet music was still important, by the end of WWII, the recording industry had come to dominated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Development of the American Music Industry
    &lt;ul&gt;
      &lt;li&gt;What creates the conditions for popular music to become a consumer product?
        &lt;ul&gt;
          &lt;li&gt;1790s to 1830s - Amendments to the copyright law to cover sheet music&lt;/li&gt;
          &lt;li&gt;The Victorian Ballad: &lt;strong&gt;Minstrel Shows&lt;/strong&gt; and &lt;strong&gt;Parlour Music&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Minstrel Shows
        &lt;ul&gt;
          &lt;li&gt;Variety show that depicted African-Americans in a racist and stereotypical light&lt;/li&gt;
          &lt;li&gt;Instruments: Guitar, Banjo, Fiddle, also Piano&lt;/li&gt;
          &lt;li&gt;Most important composer: Steven Foster&lt;/li&gt;
          &lt;li&gt;Example: “Massa’s in de cold cold ground” (1852)&lt;/li&gt;
          &lt;li&gt;Characteristics: guitar accomaniment and vocal control&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Parlour Music
        &lt;ul&gt;
          &lt;li&gt;Industrial Revolution
            &lt;ul&gt;
              &lt;li&gt;Rise of the Middle Class&lt;/li&gt;
              &lt;li&gt;Luxury item = Piano = symbol of wealth&lt;/li&gt;
              &lt;li&gt;Daughters pursue “leisure” activities&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Example: “Believe Me, If All Those Endearing Young Charms” (Early 1800s) by Thomas Moore&lt;/li&gt;
          &lt;li&gt;Parlous Song - AABA form in terms of melody&lt;/li&gt;
          &lt;li&gt;Characteristics: Piano accomaniment, vocal control, and with themes such as loyalty, honesty, control, and restraint&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Demand for newly composed songs leads to the increased organization of the music industry&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tin Pan Alley
    &lt;ul&gt;
      &lt;li&gt;Charles K. Harris - “After the Ball” (1892): Sheet music sold over 5M copies = “The First Hit Song” -&amp;gt; Why? Urbanization and population growth&lt;/li&gt;
      &lt;li&gt;The success of “After the Ball” gave birth to Tin Pan Alley (TPA)&lt;/li&gt;
      &lt;li&gt;Both a musical style and a place&lt;/li&gt;
      &lt;li&gt;Manhattan in NYC, became the centre of professional music making&lt;/li&gt;
      &lt;li&gt;During the 20s and 30s, 21k publisher and 36k composers in a few blocks in TPA&lt;/li&gt;
      &lt;li&gt;Division of labour: composers, lyricists, publishers, publicity(marketing), and performers&lt;/li&gt;
      &lt;li&gt;Sheet music dominated (though transitioning to recording in the 20s)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-12-2016---lecture-2&quot;&gt;May 12, 2016 - Lecture 2&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Lyrics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic rhyme scheme&lt;/li&gt;
  &lt;li&gt;Syllabic&lt;/li&gt;
  &lt;li&gt;Idealized romance - Beginning and Ending&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;african-american-music&quot;&gt;African American Music&lt;/h2&gt;

&lt;p&gt;Where black culture emerges from and how characteristics map onto emerging culture after slavery ends&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do not get rock’n roll without the slave trade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;North American Slave Trade (1619-1863)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1619, First African slaves sold in North America&lt;/li&gt;
  &lt;li&gt;Sahara essentially divides Africa into two:
    &lt;ol&gt;
      &lt;li&gt;Northern Africa - more associated with Middle East&lt;/li&gt;
      &lt;li&gt;South Sub-Saharan Africa&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Majority of North American slaves came from South Sub-Saharan West Africa&lt;/li&gt;
  &lt;li&gt;Despite salvers’ attempts to extinguish slav culture, some aspects such as music, survived, in fact music was omnipresent&lt;/li&gt;
  &lt;li&gt;Where Rock ‘n Roll began&lt;/li&gt;
  &lt;li&gt;Work songs:
    &lt;ul&gt;
      &lt;li&gt;Used to pass time, set pace, or coordinate group work for efficiency (i.e. synchronize axe swings)&lt;/li&gt;
      &lt;li&gt;Help saving lives: by slowing pace, work songs made the group seem at the same pace, making it hard for owners to distinguish sick/slackers&lt;/li&gt;
      &lt;li&gt;“Floating pool of verse”: floating verse created by song leader - majority were men, highly valued; had many fragmented verses, made songs up on the spot&lt;/li&gt;
      &lt;li&gt;E.g. “Old Alabama” (1947): Slavery ended 12 years before recording technology, therefore we are not listening to slaves but rather a prison gang; this recording is by prisoners in 1947; song leader initiates and everyone joins in; not just a song, more like a game to keep spirits up - had to discern verse from syllables of song leader&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;folk-music&quot;&gt;Folk Music&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Performed by amateurs (derived from the French word for lovers, amore; means “doing it for free”, not paid)&lt;/li&gt;
  &lt;li&gt;For self or community entertainment&lt;/li&gt;
  &lt;li&gt;Oral tradition - passed down generationally via experience&lt;/li&gt;
  &lt;li&gt;More concern with tradition than innovation (lacking “self-consciousness”)
    &lt;ul&gt;
      &lt;li&gt;Not professionalization - quest for innovation, to stand out to get noticed; folk culture contrasts this, it focuses on continuity of tradition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;African Retentions:
    &lt;ul&gt;
      &lt;li&gt;Interest in percussion and distorted timbres
        &lt;ul&gt;
          &lt;li&gt;Timbre(tamber) (physical/audible): quality of an instrument that allows identification&lt;/li&gt;
          &lt;li&gt;West African culture has a focus on percussion (drums, but anything that is struck)&lt;/li&gt;
          &lt;li&gt;Distortion: unintended alteration of your signal - West African Perspective: seen as an overflow of intensity/investment of energy&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Value in the Ecstatic and the Cathartic: Sweat means energy&lt;/li&gt;
      &lt;li&gt;Rhythmic complexity - syncopation
        &lt;ul&gt;
          &lt;li&gt;Indian music has complex notes and rhythms - no chords or harmonies&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Use of “riffs”, a small, self-contained, music gesture that is repeated over and over, becomes the basis of a longer composition (opposite: motif)&lt;/li&gt;
      &lt;li&gt;Use of “call and response” -&amp;gt; West African perspective: no difference between performer and audience. Audience sing and dance with performer (in contrast to Western concert); E.g. YouTube video “Pop Song”, Jon Lajoie&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;American Civil War (1861-1865) and Post-Slavery (1865-)
    &lt;ul&gt;
      &lt;li&gt;Institutionalized racism&lt;/li&gt;
      &lt;li&gt;Acceleration of rural-to-urban shift&lt;/li&gt;
      &lt;li&gt;New forms of music appear during late 1800s:
        &lt;ol&gt;
          &lt;li&gt;Ragtime(“The Entertainer”) - urban&lt;/li&gt;
          &lt;li&gt;Jazz - urban&lt;/li&gt;
          &lt;li&gt;Blues, Country (rural) Blues:
            &lt;ul&gt;
              &lt;li&gt;Wandering musicians&lt;/li&gt;
              &lt;li&gt;Male vocalist, with acoustic guitar&lt;/li&gt;
              &lt;li&gt;Plaintive vocal sound - lament&lt;/li&gt;
              &lt;li&gt;Themes: travel, economy, and love&lt;/li&gt;
              &lt;li&gt;12 Measure phrases (known as bars)&lt;/li&gt;
              &lt;li&gt;a-a-b lyric pattern&lt;/li&gt;
              &lt;li&gt;Call and response between guitar and voice&lt;/li&gt;
              &lt;li&gt;Floating pool of verse&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Robert Johnson (1911-1938)
    &lt;ul&gt;
      &lt;li&gt;Defined standards for blues guitar&lt;/li&gt;
      &lt;li&gt;Peak: November 1936 and June 1937 - The Complete Recordings&lt;/li&gt;
      &lt;li&gt;Mythic character&lt;/li&gt;
      &lt;li&gt;E.g. “Sweet Home Chicago”, November 1936: added six/Boogie-woogie pattern (note: take a body of the song and put it into intro and outro (end of each verse is similar to intro))&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Word of the Class: Self-Conscious (indicator of  professional performer; unlike folk performer; Actively thinking about how to innovate and improve in order to gain more audience)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changes in Technology&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mechanical Reproduction
    &lt;ul&gt;
      &lt;li&gt;1877: Edison invented phonograph (gave rise to gramophone)&lt;/li&gt;
      &lt;li&gt;1892-1912: Transition from cylinders to disks&lt;/li&gt;
      &lt;li&gt;1925: Industry standard speed set to 78 RPM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What was recorded?
    &lt;ul&gt;
      &lt;li&gt;Sheet music/TPA(Tin Pan Alley)&lt;/li&gt;
      &lt;li&gt;Black music/rural Southern white music not recorded because:
        &lt;ul&gt;
          &lt;li&gt;cultural chauvinism (people who control the technology did not think other cultures were worth recording)&lt;/li&gt;
          &lt;li&gt;Rural areas - less sales&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commercial Radio, 1920
    &lt;ul&gt;
      &lt;li&gt;January 1922 - 28 stations -&amp;gt; December 1922 - 570 stations&lt;/li&gt;
      &lt;li&gt;Controlled by only a few networks (CBS, NBC, Mutual)&lt;/li&gt;
      &lt;li&gt;First radio network: NBC, 1928&lt;/li&gt;
      &lt;li&gt;Very few independent radio stations existed&lt;/li&gt;
      &lt;li&gt;Network radio began to change patterns of consumption form regional to national&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-rise-of-the-record-industry&quot;&gt;The Rise of the Record Industry&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The record industry concerned - needs to find new markets&lt;/li&gt;
  &lt;li&gt;Ralph Peer - worked for Okeh Records&lt;/li&gt;
  &lt;li&gt;Finding songs (repertoire) and artists (A&amp;amp;R guy - artists and repertoire)&lt;/li&gt;
  &lt;li&gt;1920 - “Crazy Blues” - Mamie Smith
    &lt;ul&gt;
      &lt;li&gt;due to institutionalizedracism - black people did not record music&lt;/li&gt;
      &lt;li&gt;first significant recording by AA artists despite origin in 1877&lt;/li&gt;
      &lt;li&gt;song was a minor hit - purchased by white people despite racism&lt;/li&gt;
      &lt;li&gt;black community did not have a lot of purchasing power, thus they were not a targeted market&lt;/li&gt;
      &lt;li&gt;not a Blues song, much more associated to Jazz. Jazz is closely linked to popular music up to post-war&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Market research in popular music
    &lt;ul&gt;
      &lt;li&gt;most radio music is TPA&lt;/li&gt;
      &lt;li&gt;Ignored black cultural and southern rural white culture, thought culture was artistically and economically insignificant&lt;/li&gt;
      &lt;li&gt;Peer decided to used records to play what radio did not&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Introduction of “Hillbilly”: Carve that Possum - Uncle Dave Macon, 1927
    &lt;ul&gt;
      &lt;li&gt;Uncle Dave Macon and the Fruit Jar Drinkers&lt;/li&gt;
      &lt;li&gt;Early origin of country (music of Southeastern states, now called blue bratz) and western&lt;/li&gt;
      &lt;li&gt;More energy/intensity, very hard, on beat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-19-2016---lecture-3&quot;&gt;May 19, 2016 - Lecture 3&lt;/h2&gt;

&lt;h3 id=&quot;introduction-of-race&quot;&gt;Introduction of “Race”&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;How Long Blues, 1928, Leroy Carr and Scrapper Blackwell; beginning of guitar solo
    &lt;ul&gt;
      &lt;li&gt;First recording of AA artists and Blues (1890s, maybe 1880s)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Included different styles. The most important one was that it included the next style of Blues: City Blues = music made by country blues artists after they moved to the cities; Relaxed style&lt;/li&gt;
  &lt;li&gt;Instruments had to be louder in city than in country, therefore main instrument went from solo acoustic guitar to piano&lt;/li&gt;
  &lt;li&gt;Black and Southern cultures exposed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;television&quot;&gt;Television&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;First demonstration in 1927&lt;/li&gt;
  &lt;li&gt;Experimental and low-resolution broadcasts through the 1930s&lt;/li&gt;
  &lt;li&gt;Network broadcasts begin in 1939&lt;/li&gt;
  &lt;li&gt;By 1945 - 6 stations&lt;/li&gt;
  &lt;li&gt;WWII: TV not helpful towards war effort&lt;/li&gt;
  &lt;li&gt;By 1955 - 411 stations&lt;/li&gt;
  &lt;li&gt;Major nextworks move to Television
    &lt;ul&gt;
      &lt;li&gt;Televion was a better medium for commercials&lt;/li&gt;
      &lt;li&gt;Commercials were primary revenue source for networks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Major networks switching mediums led to more independent, local stations&lt;/li&gt;
  &lt;li&gt;First “Black Appeal” radio station - WDIA Memphis, 1948; 2 pharmacists bought a radio station&lt;/li&gt;
  &lt;li&gt;By 1954, 200 BA radio stations are on the air&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Who is listening? Extended Adolescence&lt;br /&gt;
Transistor Radio&lt;/p&gt;

&lt;h3 id=&quot;gospel&quot;&gt;Gospel&lt;/h3&gt;

&lt;p&gt;The sacred music of black culture, from the culture following the civil war -&amp;gt; spiritual&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ray Charles(Robinson), 1930-2004&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Born in Albany, GA&lt;/li&gt;
  &lt;li&gt;Blind at age 7, learns music in a school for the blind&lt;/li&gt;
  &lt;li&gt;1952 Atlantic Records&lt;/li&gt;
  &lt;li&gt;Success with white audiences - heightened level of intensity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Chicago Electric Blues&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Muddy Waters, 1913-1983
    &lt;ul&gt;
      &lt;li&gt;Born in Mississippi&lt;/li&gt;
      &lt;li&gt;Played guitar and harmonica&lt;/li&gt;
      &lt;li&gt;Emulated Robert Johnson&lt;/li&gt;
      &lt;li&gt;Moved to Chicago in the early 1940s&lt;/li&gt;
      &lt;li&gt;Switched to electric guitar, 1945&lt;/li&gt;
      &lt;li&gt;1946, records for Aristocrat Records (would later become Chess Records)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hoochie Coochie Man (1954, Willie Dixon)
    &lt;ul&gt;
      &lt;li&gt;Verse chorus (modified 12-bar blues)&lt;/li&gt;
      &lt;li&gt;Stop Time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-26-2016---lecture-4&quot;&gt;May 26, 2016 - Lecture 4&lt;/h2&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Crossover hits: works done by black artists but were popular on the charts;&lt;/li&gt;
  &lt;li&gt;White teenagers listened to a lot Black music&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cover-versions-1954-1956&quot;&gt;Cover Versions: 1954-1956&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“white” versions of “black” records; did not violate copyright laws; quite legal; crossover-&amp;gt;pop chart-&amp;gt;within a week or two the same song performed by white artists would be on the chart with it simultaneously-&amp;gt;to appease white parents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Richard Wayne Penniman “Little Richard” **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Born 1932, Macon, GA&lt;/li&gt;
  &lt;li&gt;First big hit: “Tutti Frutti”&lt;/li&gt;
  &lt;li&gt;Released late 1955 on Specialty Records (lyrics revised by Dorothy LaBostrie; she replaced some sexual lyrics with less controversial words)&lt;/li&gt;
  &lt;li&gt;“Crossover” hit: #2 R&amp;amp;B, #17 Pop on Billboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Pat Boone **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Born 1934&lt;/li&gt;
  &lt;li&gt;Was just breaking as a popstar in 1955&lt;/li&gt;
  &lt;li&gt;Early 1956, released a cover of “Tutti Frutti”&lt;/li&gt;
  &lt;li&gt;No R&amp;amp;B, #10 Pop&lt;/li&gt;
  &lt;li&gt;Outsold Little Richard with white audiences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** What was changed? **&lt;/p&gt;

&lt;p&gt;** Cover Versions: “Sh-Boom” **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Chords (black, original) and The Crew Cuts (white, cover);&lt;/li&gt;
  &lt;li&gt;The Chords: June 1954/Cat Records(independent) (AABA pattern), crossover hit on the pop charts&lt;/li&gt;
  &lt;li&gt;The Crew Cuts: July 1954/Mercury Records (AABA,Sh-Boom(A), Sh-Boom(A),BA, still retained the AABA structure; deliberately repeated the AABA pattern to appeal to white middle class audiences, will sound more familiar; Changes:)&lt;/li&gt;
  &lt;li&gt;The Chords: Form: 1x through AABA, with interludes; Voice: distorted - use of lower octave in B; Solo: Sax - distorted timbre, sexual metaphor&lt;/li&gt;
  &lt;li&gt;The Crew Cuts: Form: 2x through AABA - clearly stated; Voice: Clean, no use of lower octave; Solo: No solo - repeats of “Sh-boom” group vocal - timpani joke (cartoon reference)&lt;/li&gt;
  &lt;li&gt;Racist? Or a continuation of TPA traditions? Record companies -&amp;gt; simply business&lt;/li&gt;
  &lt;li&gt;The Chords: #3 R&amp;amp;B / #5 Pop&lt;/li&gt;
  &lt;li&gt;The Crew Cuts: no R&amp;amp;B / #1 Pop for 9 weeks - Song of the Year (not The Chords)&lt;/li&gt;
  &lt;li&gt;Both white and black artists performing in this new style: a mix of pop, C&amp;amp;W, and R&amp;amp;B, targeted teenagers - Rock ‘n Roll (term attributed to Alan Freed; term goes at least back to the 1800s out of Black culture)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Bill Haley and the Comets **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Born in 1925&lt;/li&gt;
  &lt;li&gt;Originally “Bill Haley and the Saddlemen”&lt;/li&gt;
  &lt;li&gt;Western Swing (Jazz beats)&lt;/li&gt;
  &lt;li&gt;Changes to “Bill Haley and the Comets” in 1952&lt;/li&gt;
  &lt;li&gt;Early hits with “Crazy Man, Crazy” and “Shake, Rattle, and Roll”&lt;/li&gt;
  &lt;li&gt;** 1954, Rock Around The Clock **
    &lt;ul&gt;
      &lt;li&gt;Becomes popular in 1955 in the midst of fear of black culture on white teenagers&lt;/li&gt;
      &lt;li&gt;Film “Blackboard Jungle”&lt;/li&gt;
      &lt;li&gt;12 bar blues&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Elvis Presley (1935-1977) **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Born in Tupelo, Mississippi&lt;/li&gt;
  &lt;li&gt;1953 - 18 years old, Sam Phillips/Sun Records (independent, 2 employees)&lt;/li&gt;
  &lt;li&gt;Spring 1954 - Records with Scotty Moore (Guitar) and Bill Black (Bass); White artists did not use drums in 1954&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/2016/05/02/Music-140.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/2016/05/02/Music-140.html</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>MATH 237 - Calculus 3 for Honours Mathematics</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MATH 237 - Calculus 3 for Honours Mathematics
Instructor: Joseph J. West
Location: MC 4059
Time: Mondays, Wednesdays, Fridays 10:30am - 11:20pm
Tutorials: M3 1006 Mondays 12:30pm - 1:20pm
Term: Spring 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;may-2-2016---lecture-1&quot;&gt;May 2, 2016 - Lecture 1&lt;/h2&gt;

&lt;p&gt;Midterm (25%): 4:30pm-6:15pm, June 14 (T), 2016&lt;br /&gt;
Assignments are due at 10:23am every WEDNESDAY&lt;br /&gt;
Email: jjwest@uwaterloo.ca&lt;br /&gt;
Office Hours this week: MW 11:30-12:00, 2:30-3:00&lt;/p&gt;

&lt;p&gt;MATH 138: x -&amp;gt; f(x)&lt;br /&gt;
MATH 237: (x, y) -&amp;gt; f(x, y) or (x, y, z) -&amp;gt; f(x, y, z)&lt;br /&gt;
Output: Real number&lt;/p&gt;

&lt;p&gt;Definition: A &lt;strong&gt;scalar function&lt;/strong&gt; f is a rule which assigns each ordered pair of real numbers (x, y) in a set D (called the domain) in R&lt;sup&gt;2&lt;/sup&gt; a unique real number z = f(x, y). The set is the range.&lt;/p&gt;

&lt;h2 id=&quot;may-4-2016---lecture-2&quot;&gt;May 4, 2016 - Lecture 2&lt;/h2&gt;

</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/2016/05/02/Math-237.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/2016/05/02/Math-237.html</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>CS 246 - Object-Oriented Software Development</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CS 246 - Object-Oriented Software Development
Instructor: Brad Lushman
Section: 001
Location: MC 4045
Time: Tuesdays and Thursdays 10:00am - 11:20am
Tutorials: MC 4060 Wednesdays 1:30pm - 2:20pm
Term: Spring 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;may-3-2016---lecture-1&quot;&gt;May 3, 2016 - Lecture 1&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Grading Scheme&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assignments - 0(A0) 7 7 7 7 12(project) = 40%&lt;/li&gt;
  &lt;li&gt;Midterm (4:30pm - 6:20pm, June 23 (Th), 2016) = 20%&lt;/li&gt;
  &lt;li&gt;Final = 40%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This course requires you to work in Linux. There are several options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lab machines&lt;/li&gt;
  &lt;li&gt;Install Linux on your own machines&lt;/li&gt;
  &lt;li&gt;Make SSH connection to school machines (Use Putty (putty.exe) on Windows, winscp for file transfer, XMing for Xwindows)&lt;/li&gt;
  &lt;li&gt;Download cygwin - Linux-like environment for Windows&lt;/li&gt;
  &lt;li&gt;Get a Mac&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;4 Modules in this Course:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux Shell (2 weeks)&lt;/li&gt;
  &lt;li&gt;C++ Language, C++14 (10 weeks)&lt;/li&gt;
  &lt;li&gt;Tools&lt;/li&gt;
  &lt;li&gt;Software Engineering (design etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Homework”: Go on Piazza -&amp;gt; Linux Reference Sheet -&amp;gt; Save and print&lt;/p&gt;

&lt;h2 id=&quot;module-1-linux-shell&quot;&gt;Module 1: Linux Shell&lt;/h2&gt;

&lt;p&gt;A shell is an interface to the operating system, i.e. how we get the OS to do things (run programs, manage files etc.). There are two kinds of shells: graphical (with icons and clicking) and the command line. The shell we will use is Bash. Check if you are using Bash, login to shell and type in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo $0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It should return “bash”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux file system: working with files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cat&lt;/strong&gt; - short for concatenate; display contents of a file (e.g. cat user/share/dict/words). In Linux, a directory is considered a special kind of file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt; - list files in the current directory (non-hidden files)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ls -a&lt;/strong&gt; - list all files (including hidden; hidden files start with a “.”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pwd&lt;/strong&gt; - print current directory (pwd = print working directory)&lt;/p&gt;

&lt;p&gt;What happens when we only type in “cat”? It just kind of sits there, waiting for input. It’s kinda like a parrot, repeating what you typed in. If we can capture the output into a file…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It would capture the input. NOT RECOMMENDED: ^C. It would prevent cat from doing clean-up. Let it finish on its own: ^D at the beginning of a line sends an “EOF” signal to cat.&lt;/p&gt;

&lt;p&gt;One greater than sign replaces, two appends.&lt;br /&gt;
In general, command args &amp;gt; file
executes command args + captures the output in file -&amp;gt; called &lt;strong&gt;output redirection&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using less than sign, takes in input from the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat &amp;lt; output.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The line above displays the file. Seems to be equivalent to what we have before. Are these two things the same? NO. The reason is very important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;cat input.txt -&amp;gt; passes the NAME input.txt to cat as an argument. Cat opens input.txt and displays its contents&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cat &amp;lt; input.txt -&amp;gt; the shell opens the file and passes the contents to cat IN PLACE of keyboard input&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt; - word count, displays numbers of lines, words, and characters of a file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cat *.txt&lt;/strong&gt; - *.txt globbing pattern -&amp;gt; matches any sequence of characters (the shell finds all files that mathch the pattern)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cat &amp;lt; *.txt&lt;/strong&gt; - ERROR! The shell will only attach one file to cat’s input stream&lt;/p&gt;

&lt;p&gt;Many (but not all) commands take both kinds of inputs:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cat &amp;lt; input.txt &amp;gt; output.txt&lt;/strong&gt; - sends chars from input.txt to output.txt; effectively a copy-paste action&lt;/p&gt;

&lt;p&gt;Every process is attached to 3 streams. Stdin goes into the program, stdout and stderr come out of the program. Stdin -&amp;gt; program -&amp;gt; stdout and stderr. By default, stdin = keyboard, stdout, stderr = screen.
&amp;lt; connects stdin to file, &amp;gt; connects stdout to file, 2&amp;gt; stdrr. Stderr separates output stream from error messages, so that output error messages can go to different places, and that error messages don’t cut/block output files.&lt;/p&gt;

&lt;p&gt;Also, stdout may be &lt;strong&gt;buffered&lt;/strong&gt;. System may assemble characters before displaying. However, stderr isn’t buffered, because user needs to see error messages immediately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pipes&lt;/strong&gt;: Make one program’s output(stdout) another program’s input(stdin). Example: How many words occur in the first 20 lines of sample.txt?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head -n file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gives the first n lines of file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wc -w
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;counts words (just print the word count)&lt;/p&gt;

&lt;p&gt;so&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head -20 sample.txt | wc -w
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Here,&lt;/td&gt;
      &lt;td&gt;(the pipe symbol) makes the output of the command before it the input of the command after it.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-4-2016---tutorial-1&quot;&gt;May 4, 2016 - Tutorial 1&lt;/h2&gt;

&lt;p&gt;To zip your assignment files, do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip (directory where your files are).zip *
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in the directory where the files are.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;marmoset_submit cs246 (question, e.g a0) (file you want to submit, zipped)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is how you submit assignments to Marmoset.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-5-2016---lecture-2&quot;&gt;May 5, 2016 - Lecture 2&lt;/h2&gt;

&lt;p&gt;Suppose we have files words1.txt, words2.txt…, and each of them has one word per line. We want: A duplicate-free list of all the words used in any of these files&lt;/p&gt;

&lt;p&gt;We need the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sort - sorts lines (man: Write sorted concatenation of all FILES(s) to standard output)&lt;/li&gt;
  &lt;li&gt;uniq - remove consecutive duplicate lines from input (man: filter adjacent matching lines from INPUT, writing to OUTPUT)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One possibility:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat words*.txt | uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s the problem with this? We must sort our input first, because for aabaacd, it would produce abacd, with duplicates.&lt;/p&gt;

&lt;p&gt;This should work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat words*.txt | sort | uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sort it first, then call uniq. But there’s still a problem: it’s way too inefficient, beacuse it cat(s) all the files together FIRST, and then sorts it.&lt;/p&gt;

&lt;p&gt;This is better:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sort words*.txt | uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Q: Is it possible to use the output onf one program as a &lt;strong&gt;parameter&lt;/strong&gt; to another?&lt;/p&gt;

&lt;p&gt;Yes. E.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;Today is $(date) and I am $(whoami)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The shell executes date and whoami, and subsitutes the results into the command line.&lt;/p&gt;

&lt;p&gt;WARNING:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &#39;Today is $(date) and I am $(whoami)&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will print the &lt;strong&gt;LITERAL&lt;/strong&gt; interpretation, i.e. Today is $(date) and I am $(whoami)&lt;br /&gt;
Single quotes do not execute the substitution.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;$(ls words*.txt)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;prints a list of names of the text files:&lt;br /&gt;
words1.txt&lt;br /&gt;
words2.txt&lt;br /&gt;
…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pattern Matching in Text Files&lt;/strong&gt;&lt;br /&gt;
Use egrep (extended global regular expression print) = grep -E&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep pattern file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;returns all lines that contain the pattern.&lt;/p&gt;

&lt;p&gt;E.g. print lines that contain “cs246”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep cs246 index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What about “cs246” OR “CS246”?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep &quot;cs246|CS246&quot; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The vertical bar (|) means “OR”, and the double quotes prevent the shell from interpreting the bar as a pipe.&lt;/p&gt;

&lt;p&gt;We can use parentheses to group subexpressions together:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep &quot;(cs|CS)246&quot; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The patterns that egrep understands are called &lt;strong&gt;regular expressions&lt;/strong&gt;. NOT globbing patterns.&lt;/p&gt;

&lt;p&gt;“(c|C)(s|S)246” is equivalent to “[cC][sS]246”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[…]&lt;/strong&gt; syntax says to match any SINGLE character in he square brackets. (a|1|c|2) is equivalent to [a1c2].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[^…]&lt;/strong&gt; matches any 1 character not in the square brackets.&lt;/p&gt;

&lt;p&gt;“[cC][sS] ?246” allows for an optional space before the 246. ? syntax says to match 0 or 1 occurrences of the preceding expression.&lt;/p&gt;

&lt;p&gt;* syntax which matches 0 or more of the preceding expression. So (cs)*246 -&amp;gt; 246, cs246, cscs246, cscscs246…&lt;br /&gt;
cs(cs)*246 matches at least one cs at the front (eliminating the zero case)&lt;/p&gt;

&lt;p&gt;(cs)+246 is equivalent to cs(cs)*246. The + syntax matches 1 or more of the preceding expression.&lt;/p&gt;

&lt;p&gt;.* will match any sequence of characters&lt;/p&gt;

&lt;p&gt;.+ will match any non-empty sequence of characters&lt;/p&gt;

&lt;p&gt;“cs *246” matches any string starting with cs, followed by any string, followed by 246.&lt;/p&gt;

&lt;p&gt;^ matches beginning of line&lt;/p&gt;

&lt;p&gt;$ matches the end of line&lt;/p&gt;

&lt;p&gt;^cs246 line starts with cs246&lt;/p&gt;

&lt;p&gt;cs246$ line ends with cs246&lt;/p&gt;

&lt;p&gt;Want all lines of even length&lt;/p&gt;

&lt;p&gt;^(..)*$&lt;/p&gt;

&lt;h1 id=&quot;the-other-section&quot;&gt;The Other Section&lt;/h1&gt;

&lt;p&gt;Pipes allow us to hook the stdin of one program to the stdout of another. This is done using the pipe character | between commands&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd1 args1 | cmd2 args2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Regex Rules&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can use parentheses for a sub-pattern&lt;/li&gt;
  &lt;li&gt;Can use square brackets to match any one character in the square brackets&lt;/li&gt;
  &lt;li&gt;[^…] matches any one character EXCEPT those in the square brackets&lt;/li&gt;
  &lt;li&gt;A ? after a pattern or character represents 0 or 1 of that pattern/character&lt;/li&gt;
  &lt;li&gt;A * after a pattern/character represents 0 or more of that pattern/character&lt;/li&gt;
  &lt;li&gt;A + “1 or more”&lt;/li&gt;
  &lt;li&gt;. matches any SINGLE character&lt;/li&gt;
  &lt;li&gt;^ and $ match the start and end of line respectively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E.g.&lt;br /&gt;
.* - anything&lt;br /&gt;
.+ - non-empty string&lt;br /&gt;
^.+$ - all non-empty lines&lt;br /&gt;
^.*$ - all lines&lt;/p&gt;

&lt;p&gt;^(..)*$ - grabs all lines with even number of characters&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Permissions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ls -l gives the long form listing of the files in the current directory&lt;/li&gt;
  &lt;li&gt;First 3 bits: Owner r-read w-write x-execute&lt;/li&gt;
  &lt;li&gt;Middle 3 bits: Group&lt;/li&gt;
  &lt;li&gt;Last 3 bits: Others&lt;/li&gt;
  &lt;li&gt;r: ordinary files-&amp;gt; can be read, directories-&amp;gt; contents can be read, globbing workds, ls works&lt;/li&gt;
  &lt;li&gt;w: ordinary files-&amp;gt;can be modified, directories-&amp;gt; contents can be modified, add/remove&lt;/li&gt;
  &lt;li&gt;x: file’s contents can be executed as a program, directories-&amp;gt;directories can be navigated (can cd into the directory)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Changing Permissions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;to change permissions use chmod&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  chmod mode file
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;mode is broken up to 3 parts - user, operator, and permissions&lt;/li&gt;
  &lt;li&gt;user is either u (owner), g (group), o (other), or a (all)&lt;/li&gt;
  &lt;li&gt;operator is either + (add), - (remove), = (set exactly)&lt;/li&gt;
  &lt;li&gt;permissions are r, w, x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod o+r filename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gives other group read access to the file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod o-r filename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is the reverse&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod a-r filename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then nobody can read it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod u=rwx filename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then the owner can do anything with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell Scripts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A shell script is a file containing sequences of shell commands execueted as a program. For example if we wanted to print the date, current user, current dir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash (this header tells the OS that this is a Bash script; allows the OS to interpret it the following as bash commands)&lt;/span&gt;
date
whoami
&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;.sh is the standard extension of a bash script, but you can put whatever you want. Don’t forget permissions. Needs to be executable. Use chmod to give it executation rights.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variables can be assigned with single equals.&lt;/li&gt;
  &lt;li&gt;x=1 (NO SPACES!!!)&lt;/li&gt;
  &lt;li&gt;use echo &amp;amp;{x} to grab the value of the variable x (parentheses run what’s inside it in a “subshell”) (curly braces are important: good practice)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Shell Script Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write a script that takes in a string to check if it is BAD. A string that can be found in a dict is bad.
General format of conditional statements in bash:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ cond ]; then // the square brackets cannot &quot;touch&quot; what&#39;s inside
...
elif [ cond ]; then
...
else
...
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;$?&lt;/strong&gt; contains the return value of the last-run command.
&lt;strong&gt;$1&lt;/strong&gt; retrieves the first parameter&lt;/p&gt;

&lt;p&gt;Create a .sh script as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

egrep &lt;span class=&quot;s2&quot;&gt;&quot;^&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt; /usr/share/dict/words &amp;gt; /dev/null  &lt;span class=&quot;c&quot;&gt;# /dev/null is where data goes to DIE&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; //-eq compares
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Bad password
&lt;span class=&quot;k&quot;&gt;else
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Maybe not the worst
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And before you run it,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod u+x goodpass.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In bash, the pound symbol (#) starts a comment.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-10-2016---lecture-3&quot;&gt;May 10, 2016 - Lecture 3&lt;/h2&gt;

&lt;p&gt;Review:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep pattern file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;prints all lines in file that contain a match to pattern&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell Scripts Review&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash  #&quot;Shebang line&quot;  &lt;/span&gt;
date  
whoami  
&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To run the script in the current directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./myscript
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x=1 #NO SPACES  
echo $x #Use $ when fetching the value of a variable
# No $ when setting a var ($ = &quot;fetch the value of&quot;)
# Good practice: ${x} - brace brackets, good style
# All vars contain strings, e.g. x is the STRING 1, not the number/int
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E.g.&lt;br /&gt;
    dir = ~/cs246
    echo ${dir}
    /u/bmlushma/cs246 # get the absolute path
    ls ${dir} # contents of cs246&lt;/p&gt;

&lt;p&gt;There are some global variables:&lt;br /&gt;
    env # environment variables
    echo ${PATH} # list of directories (where the shell looks for programs)&lt;/p&gt;

&lt;p&gt;When you type a command, the shell searches the list in order for a matching program.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo * # prints all files in the current directory
echo &quot;*&quot; - suppresses globbing pattern
echo &#39;*&#39; - suppresses globbing pattern
echo &quot;$PATH&quot; # expands the quotes, $-expansion happens
echo &#39;$PATH&#39; # absolutely literally
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Special Variables for Scripts&lt;/strong&gt;&lt;br /&gt;
    $1, $2, … # command-line arguments&lt;/p&gt;

&lt;p&gt;E.g. check whether a word is in the dictionary&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./isItAWord hello

#!/bin/bash

egrep &quot;^$1$&quot; /usr/share/dict/words # prints the word if found, prints nothing if not
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E.g. a good password is not in the dictionary&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep &quot;^$1$&quot;/usr/share/dict/words &amp;gt; /dev/null # to black hole, suppress output
# we could store the out in a variable
x=$egrep ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: every program returns a status code when finished: egrep returns 0 if found, 1 if not found (general convention in UNIX: 0 means success, non-0 means failure)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$? # status of the most recently executed command

if [ $? -eq 0]; then # the first square bracket is the name of a program, and what&#39;s inside the square brackets are its arguments
    echo Bad password
else
    echo Maybe a good password
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We want to verify that the user has inputted the correct number of arguments, and print a usage message if it’s wrong&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

usage&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; password&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# $0 is the name of the script/program as it was typed&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-ne 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# $# is the number of arguments&lt;/span&gt;
    usage
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;egrep ... &lt;span class=&quot;c&quot;&gt;# as established above&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now this is a good program that can also check if the input is valid.&lt;/p&gt;

&lt;p&gt;The general structure of conditional statements is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ cond ]; then
    ...
elif [ cond ]; then
    ...
else
    ...
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Comparisons to other conditions: Check the Linux reference sheet&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loops&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Loops: print the numbers from 1 to $1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; -le &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;x+1&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# $(()) for arithmetic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looping over a list, e.g. rename all .cpp to .cc&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;name &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.cpp; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# for ... in sets the variable to each word in the given list&lt;/span&gt;
    mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%cpp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;cc &lt;span class=&quot;c&quot;&gt;# value of name, without trailing cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;e.g. how many times does word $1 occur in the file $2?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;word &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#good idea - enclose vars in double quotes, prevent bad input&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#String equality == instead of -eq&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;x+1&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;e.g. Payday is the last Friday of the month. When is this month’s payday?&lt;/p&gt;

&lt;p&gt;2 tasks here: compute date and fomat the answer&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cal | awk &#39;{print $6}&#39; | egrep &quot;[0-9]&quot; | tail -1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-11-2016---tutorial-2&quot;&gt;May 11, 2016 - Tutorial 2&lt;/h2&gt;

&lt;p&gt;Want: stdout and stderr in the same file&lt;/p&gt;

&lt;p&gt;printer » out 2&amp;gt; out # works
  printer &amp;gt; out 2» out #doesn’t work&lt;/p&gt;

&lt;p&gt;#Alternatives
  printer &amp;amp;&amp;gt; out
  printer &amp;gt; out 2&amp;gt;&amp;amp;1
  printer 2&amp;gt;out 1&amp;gt;&amp;amp;2&lt;/p&gt;

&lt;p&gt;Want: Give the top 10 most commonly used words&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sort wordCollection&lt;/td&gt;
      &lt;td&gt;uniq -c&lt;/td&gt;
      &lt;td&gt;head # problem&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort wordCollection&lt;/td&gt;
      &lt;td&gt;uniq -c&lt;/td&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td&gt;tail # works&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort wordCollection&lt;/td&gt;
      &lt;td&gt;uniq -c&lt;/td&gt;
      &lt;td&gt;sort -k1,1rn -k2,2&lt;/td&gt;
      &lt;td&gt;head # sort takes in arguments -k as key; 1,1 = first character r = reverse order(descending) n = sort in numerical order, 2 break ties&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort wordCollection&lt;/td&gt;
      &lt;td&gt;uniq -c&lt;/td&gt;
      &lt;td&gt;sed ‘s_6&lt;em&gt;12&lt;/em&gt;’&lt;/td&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td&gt;tail # Use sed to replace 6s with 12s and then sort lexigraphically&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort wordCollection&lt;/td&gt;
      &lt;td&gt;uniq -c&lt;/td&gt;
      &lt;td&gt;sed ‘s_6&lt;em&gt;12&lt;/em&gt;’&lt;/td&gt;
      &lt;td&gt;sort -k1,1nr -k2,2&lt;/td&gt;
      &lt;td&gt;head&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;egrep:&lt;/p&gt;

&lt;p&gt;^ - match beginning of line&lt;br /&gt;
$ - match end of a line&lt;br /&gt;
^$, ^a$&lt;br /&gt;
. - matches any single character&lt;br /&gt;
? - matches preceeding pattern 0 or 1 times&lt;br /&gt;
* - 0 or more&lt;br /&gt;
+ - 1 or more&lt;/p&gt;

&lt;p&gt;Note: abc* != (abc)*
ab, abccc, abcccccc, in comparison to abc, abcabc, abcabcabc&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-12-2016---lecture-4&quot;&gt;May 12, 2016 - Lecture 4&lt;/h2&gt;
&lt;p&gt;Recall: compute payday (last Friday of the month); report nicely&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

answer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -eq 31 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# inside a fn - $1, $2 etc are the args to the function&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This month: the 31st&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This month: the &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;th&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

answer &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cal | awk &lt;span class=&quot;s1&quot;&gt;&#39;{print $6}&#39;&lt;/span&gt; | egrep &lt;span class=&quot;s2&quot;&gt;&quot;[0-9]&quot;&lt;/span&gt; | tail -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# the whole thing after the dollar sign is ${1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Generalize to any month:&lt;/p&gt;

&lt;p&gt;cal June 2016 # gives calendar for June 2016&lt;br /&gt;
Want: let payday June 2016 gives June 2016’s payday&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

answer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;preamble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;preamble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;This month&#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi

  if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -eq 31 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;preamble&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;s payday is on the 31st.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;preamble&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;s payday is on the &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;th.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

answer &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cal &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;&#39;{print $6}&#39;&lt;/span&gt; | egrep &lt;span class=&quot;s2&quot;&gt;&quot;[0-9]&quot;&lt;/span&gt; | tail -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# if $1 and $2 are supplied, revert back to previous behaviour&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;software-engineering-testingsaka-qa-lmao&quot;&gt;Software Engineering: Testings(aka QA lmao)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;essential part of program development&lt;/li&gt;
  &lt;li&gt;ongoing, not just at the end
    &lt;ul&gt;
      &lt;li&gt;begins &lt;strong&gt;BEFORE&lt;/strong&gt; coding&lt;/li&gt;
      &lt;li&gt;test suites - expected behaviour&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NOT debugging - cannot debug without first testing&lt;/li&gt;
  &lt;li&gt;cannot guarantee correctness, can only prove wrongness&lt;/li&gt;
  &lt;li&gt;ideally, developer + tester should be different people&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Human Testing&lt;/strong&gt; - Humans look over code, find flaws, code inspection, walkthroughs&lt;br /&gt;
&lt;strong&gt;Machine Testing&lt;/strong&gt; - Run the program on selected input, check against spec, can’t test everything - choose test cases carefully&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black/White/Grey Box Testing&lt;/strong&gt;: no/full/some knowledge of program implementation&lt;br /&gt;
Start with black box, supplement with white box&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;various classes of input, e.g. numerical ranges, positive/negative&lt;/li&gt;
  &lt;li&gt;Boundaries of valid ranges (edge cases)&lt;/li&gt;
  &lt;li&gt;Multiple simulatenous boundaries (corner cases)&lt;/li&gt;
  &lt;li&gt;Intuition/Experience (“Ayy I’ve seen programs like that before, better try blah lmao”)&lt;/li&gt;
  &lt;li&gt;Extreme cases (e.g. integer overflow; how large can the integer get before it breaks)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;White box - executes all logical paths through the program&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;run through the true part and false branch of conditional statements&lt;/li&gt;
  &lt;li&gt;every way you can go from start to finish should be tested&lt;/li&gt;
  &lt;li&gt;make sure every function you write actually gets called&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance Testing&lt;/strong&gt; - Is the program fast enough?&lt;br /&gt;
&lt;strong&gt;Regression Testing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure new changes to the program don’t break old tests&lt;/li&gt;
  &lt;li&gt;test suites (ALWAYS ADD TESTS; NEVER SUBTRACT), testing scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;module-2-c-ayy&quot;&gt;Module 2: C++ (ayy)&lt;/h2&gt;

&lt;p&gt;Hello World in C:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  printf(&quot;Hello World!\n&quot;);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hello World in C++:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main() {
  cout &amp;lt;&amp;lt; &quot;Hello World&quot; &amp;lt;&amp;lt; ende;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;main MUST return int in C++&lt;/li&gt;
  &lt;li&gt;stdio.h, printf still available in C++&lt;/li&gt;
  &lt;li&gt;preferred C++ I/O: header &lt;iostream&gt;&lt;/iostream&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; ___ &amp;lt;&amp;lt; ____ &amp;lt;&amp;lt; ____  
std::ende = end-of-line
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using namespace std lets you say cout and ende instead of std::cout and std::ende&lt;/p&gt;

&lt;p&gt;Return statement - returns status code to the shell ($?). If left out, main returns 0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiling C++ Programs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the school Linux environment:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    g++-5 -std=c++14 program.cc -o program
    (-o program is the name of the executable binary (if not specified: a.out))
    // OR
    g++14 program.cc -o program // if you have done A0 and made the alias
    // Run the program by
    ./program
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Input/Output&lt;/strong&gt;&lt;br /&gt;
  3 IO streams: cout - for printing to stdout, cin - for reading from stdin, cerr - for writing to stderr&lt;/p&gt;

&lt;p&gt;Operators: « “put to” - Output, » “get from” - input&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cerr &amp;lt;&amp;lt; x // x flows to cerr
  cin &amp;gt;&amp;gt; x // input flows to x
  // The operator points in the direction of information flow
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E.g. Add 2 numbers&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main() {
  int x, y;
  cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y; // cin ignores whitespace; gets two integers, ignoring whitespace
  cout &amp;lt;&amp;lt; x+y ;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the input doesn’t contain an integer next - statement fails, value of the var is undefined&lt;/p&gt;

&lt;p&gt;What if the input is exhaustive, before we get two ints? - Same as above&lt;/p&gt;

&lt;p&gt;If the read failed: cin.fail() will be TRUE&lt;br /&gt;
If we got an EOF: cin.fail() and cin.eof() will be both TRUE; cin.eof() not until the attempted read fails&lt;/p&gt;

&lt;p&gt;E.g. Read all ints from stdin, echo one per line to stdout. Stop on bad input or EOF&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main() {
  int i;
  while(true) {
    cin &amp;gt;&amp;gt; i;
    if (cin.fail()) break;
    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; ende;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-17-2016---lecture-5&quot;&gt;May 17, 2016 - Lecture 5&lt;/h2&gt;

&lt;p&gt;E.g. Read all ints from stdin + echo, one per line, to stdout, stop on bad input of EOF&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main() {
	int i;
	while (true) {
		cin &amp;gt;&amp;gt; i;
		if (cin.fail()) {
			break;
		}
		cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Recall: if read fails, cin.fail() will be true; if EOF: cin.fail() and cin.eof() both true, but not until the attepted read fails&lt;/p&gt;

&lt;p&gt;Note: there is an implicit conversion from cin to bool, so cin can be used as a condition. The conversion is that it’s true if fail/bad/eof bits are clear, or false if fail/bad/eof set&lt;/p&gt;

&lt;p&gt;E.g. v2.0&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main() {
	int i;
	while (true) {
		cin &amp;gt;&amp;gt; i;
		if (!cin) { // using cin as the condition, means the same thing as the other program
			break;
		}
		cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; true
 		}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: » is C’s right bitshift operator; a » b shifts a’s bits to the right by b spots&lt;/p&gt;

&lt;p&gt;E.g. 21 » 3; 21 in binary is 10101, push the last 3 digits off the cliff, so it becomes 10 in binary, which is 2; equivalent to dividing by 2 to the b-th power, ignoring remainders&lt;/p&gt;

&lt;p&gt;But when the left hand side is cin, this is the “get from” operator&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;operator &amp;gt;&amp;gt;
 	// inputs: LHS cin (istream), RHS data (variety of types); output: return cin (istream)
 	// This is why we can write: cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; z; cin &amp;gt;&amp;gt; x produces cin, x gets populated, and now we get cin &amp;gt;&amp;gt; y &amp;gt;&amp;gt; z, and so on.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E.g. v3.0&lt;/p&gt;

 	int main() {
 		int i;
 		while (true) {
 			if (!(cin » i)) { // using it as both a condition and populating i
 				break;
 			}
 			cout « i « endl;
  		}
 	}

&lt;p&gt;E.g. v4.0&lt;/p&gt;

 	int main() {
 		int i;
 		while(cin » i) { // changing the break statement into a single while loop
 			cout « i « endl
 		}
 	}

&lt;p&gt;E.g. read and echo ints until EOF, skip non-integer input&lt;/p&gt;

 	int main() {
 		int i;
 		while (true) {
 			if (!(cin » i)) {
 				if (cin.eof()) {
 					break;
 				}
 				cin.clear(); // clears the fail bit, so that cin is ready to read again
 				cin.ignore(); // throws away the next character
 			} else {
 				cout « i « endl;
 			}
 		}
 	}

&lt;p&gt;Reading strings: type std::string (#include &lt;string&gt;)&lt;/string&gt;&lt;/p&gt;

 	int main() {
 		string s;
 		cin » s;
 		cout « s « endl;
 	}

 	// skips leading white space;
 	// stops at whitespace (reads one word)

&lt;p&gt;What if we want the hvitespace? Use getline(cin, s), it reads from the current position to next newline, into s.&lt;/p&gt;

 	cout « 95 « endl; // prints 95

&lt;p&gt;What if we want to print a number in hexadecimal?&lt;/p&gt;

 	cout « hex « 95 « endl; // this will print 95 in hex, 5f
 	// hex is std::hex, is the I/O manipulator, reconfigures the output string, all subsequent ints are printed in hex (FOR THE REST OF ETERNITY, nah jkjk till the program terminates); A bit of an overkill?
 	cout « dec; // goes back to decimal

 	// Other manipulator, SEE NOTES, don’t forget
 	#include &lt;iomanip&gt;
&lt;/iomanip&gt;
&lt;p&gt;Stream abstraction applies to other fsources of data&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt; - Read from a file instead of stdin&lt;br /&gt;
 	std::ifstream reads from a file&lt;br /&gt;
 	std::ofstream writes to a file&lt;/p&gt;

&lt;p&gt;File access in C:&lt;/p&gt;

 	#include &lt;stdio.h&gt;
&lt;/stdio.h&gt;
 	int main() {
 		char s[256];
 		FILE *file = fopen(“suite.txt”, “r”); // r = read mode; file is a handle
 		while (true) {
 			fscanf(file, “%255s”, s);
 			if (feof(file)) break;
 			printf(“%s\n”, s);
 		}
 		fclose(file);
 	}

&lt;p&gt;File access in C++:&lt;/p&gt;

 	#include &lt;iostream&gt;
 	#include &lt;fstream&gt;
 	using namespace std;
&lt;/fstream&gt;&lt;/iostream&gt;
 	int main() {
 		ifstream file{“suite.txt”}; // creating and initializing an ifstream opens the file
 		string s;
 		while (file » s) {
 			cout « s « endl;
 		}
 		// IMPORTANT: the file is closed when the variable (in this case, file), goes out of scope; when the program stops, it’s popped of the runtime stack, it then closes.
 	}

&lt;p&gt;Anything you can do do with cin and cout, you can do with an ifstream or an ofstream. ANYTHING.&lt;/p&gt;

&lt;p&gt;E.g. string - attach a stream to a string and read/write it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #include &amp;lt;sstream&amp;gt; // std::istringstream and std::ostringstream read from/write to a string

 int hi = ..., lo = ...;
 ostringstream ss; // think of it as a sock
 ss &amp;lt;&amp;lt; &quot;Enter a # between&quot; &amp;lt;&amp;lt; lo &amp;lt;&amp;lt; &quot;and&quot; &amp;lt;&amp;lt; hi; // stuffing the sock with string
 string s = ss.str(); // cuts open the sock and gets the string
 cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E.g. convert a string to a #&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int n;
while (true) {
	cout &amp;lt;&amp;lt; &quot;Enter a number&quot; &amp;lt;&amp;lt; endl;
	string s;
	cin &amp;gt;&amp;gt; s;
	istringstream ss {s};
	if (ss &amp;gt;&amp;gt; n) break; // stop if you get int
	cout &amp;lt;&amp;lt; &quot;I said,&quot;;
}
cout &amp;lt;&amp;lt; &quot;You entered&quot; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Example revisited - echo numbers, skip non-numbers&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main() {
	string s;
	while (cin &amp;gt;&amp;gt; s) {
		istringstream ss {s};
		int n;
		if (ss &amp;gt;&amp;gt; n) {
			cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Strings:&lt;/p&gt;

&lt;p&gt;In C, array of char (char* or char[]), terminated by IO. Must manage own memory: get morememory when strings grow; Easy to overwrite IO and corrupt program&lt;/p&gt;

&lt;p&gt;In C++, strings grow as needed, and thus safer&lt;/p&gt;

&lt;p&gt;E.g. string s{“Hello”}; // it’s still an array (C-style string); C++ string created from C string on initialization&lt;/p&gt;

&lt;p&gt;String Operations: Equality Inequality, s1 == s2, s1 != s2&lt;br /&gt;
Comparison: s1 &amp;lt;= s2 (lexicographical comparison)&lt;br /&gt;
Length: s.length()&lt;br /&gt;
Extract individual characters: s[0], s[1] etc.&lt;br /&gt;
Concatenation: s3 = s1 + s2, s3 += s4&lt;br /&gt;
More details: SEE NOTES&lt;/p&gt;

&lt;p&gt;Default Function Parameters&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void printSuiteFile(String name = &quot;suite.txt&quot;) { // default value
	...
}

printSuiteFile(&quot;suite2.txt&quot;);
printSuiteFile(); // prints from suite.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: optional params must be last; if you leave out two parameters, they have to be the last two; 3,3 etc.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-18-2016---tutorial-2&quot;&gt;May 18, 2016 - Tutorial 2&lt;/h2&gt;

&lt;p&gt;##Shell Scripting##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exit codes are important; non-zero return/exit value = ERROR&lt;/li&gt;
  &lt;li&gt;Write to the correct stream&lt;/li&gt;
  &lt;li&gt;Scoping for subroutines, anything defined befored a subroutine is visible(and modifiable) in the subroutine, except positional arguments ($1, $2, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Testing##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t have to worry about invalid inputs&lt;/li&gt;
  &lt;li&gt;Testing is hard&lt;/li&gt;
  &lt;li&gt;Try sanity checks (“No one could make this mistake”)&lt;/li&gt;
  &lt;li&gt;Good coverage: boundary/edge and corner cases, equivalence classes, weird cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Possible Test Cases&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ Equivalence courses: small, medium, and large values of the target
+ Boundary/edge cases: test containing 0 as target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##C++ I/O##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DO NOT USE C I/O&lt;/li&gt;
  &lt;li&gt;3 default streams: cout, cerr, cin&lt;/li&gt;
  &lt;li&gt;If a read from cin fails, &lt;strong&gt;all subsequent reads will fail&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Make I/O More Robust##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reading from cin could fail in two ways
    &lt;ul&gt;
      &lt;li&gt;EOF&lt;/li&gt;
      &lt;li&gt;got unexpected input&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When a read fails, a flag goes up in cin
    &lt;ul&gt;
      &lt;li&gt;cin.fail() will be true&lt;/li&gt;
      &lt;li&gt;Only cin.fail() will be true if it was an error&lt;/li&gt;
      &lt;li&gt;Both cin.fail() and cin.eof() will be true if it was EOF&lt;/li&gt;
      &lt;li&gt;How to clear: cin.clear() -&amp;gt; put all cin flags down and turn it into a valid state&lt;/li&gt;
      &lt;li&gt;How to continue: cin.ignore(); order is important: clear then ignore&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you want the entire line, use getline(cin, s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Strings##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulates something like char* in C&lt;/li&gt;
  &lt;li&gt;Has length, insert, delete, search methods&lt;/li&gt;
  &lt;li&gt;Can be accessed like an array&lt;/li&gt;
  &lt;li&gt;include&lt;string&gt;&lt;/string&gt;&lt;/li&gt;
  &lt;li&gt;at(index): checks for bounds and throws an exception if out of bounds&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-19-2016---lecture-6&quot;&gt;May 19, 2016 - Lecture 6&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overloading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;C:&lt;/p&gt;

&lt;p&gt;int negInt(int n) { return -n; }
  int negBool(bool b) { return !b; }&lt;/p&gt;

&lt;p&gt;C++: Functions with different parameter lists can share the same name&lt;/p&gt;

&lt;p&gt;int neg(int n) { return -n; }
  int neg(bool b) { return !b; }
  // example of overloading&lt;/p&gt;

&lt;p&gt;Compiler uses number of types of arguments to decide which neg is being called.&lt;/p&gt;

&lt;p&gt;Overloads must differ in number of type of arguments, not just on the return type. We’ve seen this before: », « (operators, could be right shift/left shift, or could be input and output; the behaviour depends on types of args)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structs&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Node {
  int data;
  Node \*next;
}; // don&#39;t forget the semicolon

Node n1{5, nullptr}; // nullptr is the syntax for a null pointer in C++.
// Do not say NULL or 0 in this class!!!!!!! 0 will be always treated as a number, not pointer

const Node n2 = n1; // constant struct means that its fields cannot be changed; n2 is an immutable copy of n1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Parameter Passing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recall:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void inc(int n) {
  n = n + 1;
  // ...
  int x = 5;
  inc(x);
  cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; // prints 5; call-by-value
  // inc gets a copy of x and modifies the copy, not the original
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sol’n: If a function needs to modify its arugument - pass a pointer&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void inc(int n) {
  \*n = \*n + 1;
  // ...
  int x = 5;
  inc(&amp;amp;x); // x&#39;s address passed by value, inc changes value at that address, visible to caller
  cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; // prints 6
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Question: Why cin » x and not cin » &amp;amp;x?&lt;br /&gt;
Answer: C++ has another pointer-like type: references&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References (IMPORTANT!!!)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int y = 10;
int &amp;amp;z = y; // NEW. Ampersand after int. z is an **lvalue reference** to int ( which is y)
            // Like a constant pointer, similar to int \*const z = &amp;amp;y;
            // (z is a constant pointer to an int; z will always point to y implied by const)
            // (but y is not constant; you can change y however you like)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;References are like constant pointers with automatic dereferencing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;z = 12; // NOT \*z = 12
int \*p = &amp;amp;z; // &amp;amp;z gives the address of y. No matter what you do to z, you do it y. In all cases, z behaves exactly like y. z is an alias for y.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Things you CANNOT do with lvalue references&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;leave them uninitialized, because they are constant, cannot assign later
    &lt;ul&gt;
      &lt;li&gt;must be initialized with something that actually has an address (an lvalue) since references are pointers&lt;/li&gt;
      &lt;li&gt;E.g.
  int &amp;amp;x = 3; // WRONG: WONT COMPILE, because 3 is not an address
  int &amp;amp;x = y + z; // WRONG
  int &amp;amp;x = y; // GOOD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;create pointer to a reference: int &amp;amp;* x; // WRONG
    &lt;ul&gt;
      &lt;li&gt;reference to a pointer is legal: int *&amp;amp; x;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;create a reference to a reference: int &amp;amp;&amp;amp; x = …; // means something different (will discuss later)&lt;/li&gt;
  &lt;li&gt;create an array of references: int &amp;amp;a[] = {x, x, x}; // given the similarity between arrays and pointers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Things you CAN do with lvalue references&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pass as function parameters:&lt;/p&gt;

    &lt;p&gt;void inc(int &amp;amp;n) { // const pointer to the argument (x), thus changes to n affect x
    n = n + 1; // no pointer dereferencing
  }
  int x = 5;
  inc(x);
  cout « x « endl; // prints 6&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why does cin » x work? It takes x by reference&lt;/p&gt;

&lt;p&gt;istream &amp;amp;operator » (istream &amp;amp;in, int &amp;amp;n);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pass-by-value&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int f(int n) {...} // copies the argument
// if the argument is big, copying is expensive

struct ReallyBig{}; // Massive struct with thousands of fields
int f(ReallyBig rb) {...} // copying would be slow

int g(ReallyBig &amp;amp;rb) {...} // pass as reference, no copy, it&#39;s an alias, fast
// this could change rb in the caller, in contrast to pass by value, which guarantees
// no changes to rb itself after calling

int h(const ReallyBig &amp;amp;rb) {...} // pass constant reference, no copy, fast, and the parameter cannot be changed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Advice: prefer pass-by-const-reference over pass-by-value for anything larger than an int, unless the function needs to make a copy anyway - then maybe pass by value. DEFAULT SHOULD BE PASS-BY-CONST-REF. Sizeof reference is same as size of a pointer&lt;/p&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int f(int &amp;amp;n) {...}
int g(const int &amp;amp;n) {...}

f(5); // LMAO FAILS WON&#39;T COMPILE, because 5 does not have an address; can&#39;t initialize an lvalue reference (n) to a literal value;
// if n changes, can&#39;t change the literal 5
g(5); // OK; since n can never be changed, the compiler will allow this
// How though? The compiler creates a temporary location to hold 5, so that n has something to point at
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s why const ref is so CRITICALLY IMPORTANT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Memory Allocation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;C:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int \*p = malloc(n * sizeof(int));
free(p);
// Don&#39;t use these though
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;C++: new/delete&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Node {
  int data;
  Node \*next;
}

Node \*np = new Node; // allocates a Node on the heap and np points to it
// ...
delete np;
// all local variables reside on the stack
// deallocated (popped) when their scope ends
// Allocated memory is on the heap, it stays there until you get rid of it
// Remains allocated until delete is called
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you don’t delete - MEMORY LEAK&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrays on the heap&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Node \*myArray = new Node[10];
// ...
delete [] myArray; // The square brackets have to be there
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Node getMeANode() { // copy to caller&#39;s frame, expensive
    Node n;
    return n;
}

Node &amp;amp;getMeANode() { // WORST. Returns a ref (essentially a pointer) to stack-allocated data, which is dead on return
    Node n;
    return n;
}

Node \*getMeANode() { // fast-ish and safe, not returning pointer to dead data, caller responsible for delete when done
    Node \*np = new Node;
    return np;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Considering all options, do No.1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Give our own meanings to C++ operators for types we create&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Vec {
    int x, y;
}

Vec operator+(const Vec &amp;amp;v1, const Vec &amp;amp;v2) {
  Vec v{v1.x+v2.x, v1.y+v2.y}
  return v;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-24-2016---lecture-7&quot;&gt;May 24, 2016 - Lecture 7&lt;/h2&gt;

&lt;p&gt;##Preprocessor Variables##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can also define preprocessor symbols via the compiler; with gcc, syntax is -Dvname or -Dvname=val (-DX)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ifdef&lt;/strong&gt; and &lt;strong&gt;ifndef&lt;/strong&gt; directives: these check if a preprocessor variable has been defined (a use for simply defining variables); can be used to debug; #ifdef DEBUG to conditionally print stuff out to debug code; can offload run time to compile time
    &lt;ul&gt;
      &lt;li&gt;syntax: &lt;code class=&quot;highlighter-rouge&quot;&gt;
  g++14 -DDEBUG program.cpp // set DEBUG
 &lt;/code&gt;
##Separate Compilation##&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To help readability and create modularity we can split our programs into composable modules. Each module consist of &lt;strong&gt;interface&lt;/strong&gt; (type definitions and prototypes for functions, .h file, contains declarations, won’t allocate space for the variables) and &lt;strong&gt;implementation&lt;/strong&gt; (full details, allocates space for variables/functions, .cpp file, contains definitions)&lt;/li&gt;
  &lt;li&gt;Example: Let’s take the vector struct and overloaded addition operator we created and put in a module so that it can be used by other files; create vec.h and vec.cpp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```C++
  // vec.h
  struct Vec {
    int x, y;
  };&lt;/p&gt;

&lt;p&gt;Vec operator+(const Vec &amp;amp;v1
                const Vec &amp;amp;v2); // constant reference to vectors, do not modify the originals&lt;/p&gt;

&lt;p&gt;// vec.cpp
  #include “vec.h” // to get the struct definition from the interface file&lt;/p&gt;

&lt;p&gt;Vec operator+(const Vec &amp;amp;v1, const Vec &amp;amp;v2) {
    return {v1.x + v2.x, v1.y + v2.y};
  }&lt;/p&gt;

&lt;p&gt;// main.cpp
  #include “vec.h”
  using namespace std;&lt;/p&gt;

&lt;p&gt;int main() {
    Vec x {1,2};
    Vec y {3,4};
    Vec v = x + y;
    cout « v.x « ”, “ « v.y « endl;
    return 0;
  }&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;when compiling:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  g++14 -c vec.cpp // -c oppresses linking, creates .o (object) file
  g++14 -c main.cpp
  g++14 vec.o main.o -o main
  ./main
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##Global Variables##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consider we want to want to define a global variable in a module
&lt;code class=&quot;highlighter-rouge&quot;&gt;C++
  // abc.h
  int globalNum; // Wrong - definition and declaration
  // This won&#39;t work, every file that includeds abc.h defines a SEPARATE globalNum and the program will not link
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Solution: put the variable in the .cpp file
&lt;code class=&quot;highlighter-rouge&quot;&gt;C++
  // abc.h
  extern int globalNum; // Correct, just declaration
  // abc.cpp
  int globalNum;
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Multiple Includes##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Always put #include guards in .h files (ifdef, define, endif)&lt;/li&gt;
  &lt;li&gt;Never put using namespace std in .h files; DO NOT USE ANY NAMESPACES WHATSOEVER!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Classes##&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The big innovation of OOP - we can put functions inside of structs&lt;/li&gt;
  &lt;li&gt;A class is some struct that can contain functions&lt;/li&gt;
  &lt;li&gt;An object is an instance of a class&lt;/li&gt;
  &lt;li&gt;Member functions (aka Methods) are functions inside a class&lt;/li&gt;
  &lt;li&gt;this = pointer to the object a member function is called on; syntax: this-&amp;gt;var; s.grade() is like calling grade(&amp;amp;s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-26-2016---lecture-8&quot;&gt;May 26, 2016 - Lecture 8&lt;/h2&gt;

&lt;h2 id=&quot;classes-continued&quot;&gt;Classes Continued&lt;/h2&gt;
&lt;p&gt;Recall: student.cpp, implemented as struct&lt;br /&gt;
This class:&lt;/p&gt;

&lt;h2 id=&quot;initializing-objects&quot;&gt;Initializing Objects&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;When creating an object typicaly the class will have data members that need to be assigned values - initialized&lt;/li&gt;
  &lt;li&gt;As shown in the student example we could use curly braces to initialize our class, and in C++ this is true for most types - this is called &lt;strong&gt;Uniform Initialization&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Ex. Student bob {60, 70, 80} in the student.cpp example&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;constructors&quot;&gt;Constructors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Without defining how your class should be constructed C++ just takes those values and assigns them to each field in the order they were declared - this is okay, but has limitations&lt;/li&gt;
  &lt;li&gt;A better idea is to include in your class a method that does the initialization - called a &lt;strong&gt;constructor&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ex. in the student.cpp example&lt;/p&gt;

    &lt;p&gt;Student(int assns, int mt, int final) {
    // Debug statement here
    this-&amp;gt;assns = assns;
    this-&amp;gt;mt = mt;
    this-&amp;gt;final = final;
  }
  // default value given
  Student(int assns=0, int mt=0, int final=0) {
      // …
  }&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notes-on-initialization&quot;&gt;Notes on Initialization&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes variables are initialized with the assignment operator&lt;/p&gt;

    &lt;p&gt;int x = 5;
  string s = “hello”;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And sometimes with (), especially when invoking Constructors&lt;/p&gt;

    &lt;p&gt;int x(5);
string s(“Hello”)
Student bob(60, 70, 80)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An exception to this: std::vector&lt;/p&gt;

    &lt;p&gt;std::vector B{1,3,5} // contains elements 1,3,5
std::vector V(5) // of size 5
std::vector G{1} // actually contains element 1; curly brackets -&amp;gt; element rather than size&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also,&lt;/p&gt;

    &lt;p&gt;int x = 2.0; // the decimal will get chopped off
int x {2.0} // COMPILER ERROR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A class is a struct itself, an object is an actual variable of that type&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;default-constructor&quot;&gt;Default Constructor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Every class comes with a default (zero-argument) constructor which calls: you can create an object but set its values later&lt;/li&gt;
  &lt;li&gt;As soon as you declare your own constructor, you lose the default&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;#&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What about if our class contains a constant field or a reference field?&lt;/li&gt;
  &lt;li&gt;For example let’s consider adding an ID field to our student class, this should be a const value that never changes but is different for each initialized student object&lt;/li&gt;
  &lt;li&gt;Where to initialize them though? Struct definition (i.e. create an ID field in the struct; const int id = 0;)? In the body of the constructor?&lt;/li&gt;
  &lt;li&gt;Problem: const int should be initialized&lt;/li&gt;
  &lt;li&gt;Solution:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;object-creation-steps&quot;&gt;Object Creation Steps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Space is allocated&lt;/li&gt;
  &lt;li&gt;Fields are constructed&lt;/li&gt;
  &lt;li&gt;Constructor body runs&lt;/li&gt;
  &lt;li&gt;The moddile step is the missing piece of the puzzle where our initialization must go!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mil&quot;&gt;MIL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The member initialization list is part of our constructor that specifies how to initialize object and non-static data members of our class&lt;/li&gt;
  &lt;li&gt;Can be used for any non-static memebers&lt;/li&gt;
  &lt;li&gt;Initialized in order of declaration in struct&lt;/li&gt;
  &lt;li&gt;Is more efficient, when the constructor is doing the same thing as the MIL, when there is a class inside a class (school class in student class)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ex.&lt;/p&gt;

    &lt;p&gt;Student(): assns{assns}, mt{mt}, final{final}, id{id} {&lt;/p&gt;

    &lt;p&gt;}&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;copy-constructor&quot;&gt;Copy Constructor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What happens when you use the assignment opeartor to instantiate an object?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ex.&lt;/p&gt;

    &lt;p&gt;Student a {60,70,80}
  Student b = a;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;b will be initialized via the copy constructor&lt;/li&gt;
  &lt;li&gt;All classes have an implicit copy constructor that just copies all regular data fields and calls copy constructors on all object fields&lt;/li&gt;
  &lt;li&gt;Ex.
  #include “Node.h”
  Node::Node(const Node &amp;amp;in) : data(in.data) {
    if (in.next) {
      next = new Node(*in.next);
    } else {
      next = nullptr;
    }
  }
  // recursively copies the nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implicit-methods&quot;&gt;Implicit Methods&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Every class comes with
    &lt;ul&gt;
      &lt;li&gt;A default constructor&lt;/li&gt;
      &lt;li&gt;A copy constructor (just copies all fields)&lt;/li&gt;
      &lt;li&gt;A copy assignment operator&lt;/li&gt;
      &lt;li&gt;A destructor&lt;/li&gt;
      &lt;li&gt;A move constructor&lt;/li&gt;
      &lt;li&gt;A move assignmenet operator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notes-on-copy-constructor&quot;&gt;Notes on Copy Constructor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The copy constructor (implicit or otherwise) is called when
    &lt;ul&gt;
      &lt;li&gt;An object is initialized by another object&lt;/li&gt;
      &lt;li&gt;When an object is passed by value&lt;/li&gt;
      &lt;li&gt;When an object is returned by a function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implicit-conversion&quot;&gt;Implicit conversion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Be careful with a constructor that takes only one parameter - this will create an implicit conversion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;destructor&quot;&gt;Destructor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Necessary if your class has any memory allocated on the heap&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/2016/05/02/Cs-246.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/2016/05/02/Cs-246.html</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>CS 245 - Logic and Computation</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CS 245 - Logic and Computation
Instructor: Collin Roberts
Section: 003
Location: MC 2034
Time: Tuesdays and Thursdays 1:00pm - 2:20pm
Tutorials: MC 2035 Fridays 8:30am - 9:20am
Term: Spring 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;may-3-2016---lecture-1&quot;&gt;May 3, 2016 - Lecture 1&lt;/h2&gt;

&lt;p&gt;Section 003&lt;br /&gt;
Email: cd2rober@uwaterloo.ca&lt;br /&gt;
Office: DC 2128&lt;/p&gt;

&lt;p&gt;CS 245 -&amp;gt; Formal Logic&lt;/p&gt;

&lt;p&gt;1) Propositional&lt;br /&gt;
2) Predicate (aka First-Order) &amp;lt;= THE REAL GOAL&lt;/p&gt;

&lt;p&gt;Crowdmark for assignments.&lt;br /&gt;
Assignments DUE AT 12:00 ON WEDNESDAYS&lt;br /&gt;
Recommended Text: Logic in Computer Science, 2nd Ed. by Huth and Ryan&lt;/p&gt;

&lt;p&gt;Learn: Course Outline, Notes, Additional Notes - Roberts&lt;br /&gt;
Refer to the Course Schedule&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grading Scheme&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assignments (10 in total, best 9 out of 10) - 20%&lt;/li&gt;
  &lt;li&gt;Midterm (4:30pm - 6:20pm, June 9, 2016) - 35 %&lt;/li&gt;
  &lt;li&gt;Final - 45%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 1: Introduction, Basic examples, formal syntax and semantics, and properties via induction.&lt;br /&gt;
Reading: HR 1.1, 1.3, 1.4.2, Slides to p51&lt;/p&gt;

&lt;h2 id=&quot;propositional-logic&quot;&gt;Propositional Logic&lt;/h2&gt;

&lt;p&gt;LOGIC = systematic study of the principles of reasoning and inference&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To model the computer hardware, software, and embedded systems we create/encounter, in order to reason about those objects in a rigorous manner&lt;/li&gt;
  &lt;li&gt;To understand how to develop systems that can themselves apply reason and make inferences (AI)&lt;/li&gt;
  &lt;li&gt;To define a computer required logic (Turing 1936)&lt;/li&gt;
  &lt;li&gt;CS gave the first definition of “rigorous argument” (an argument that may be checked by a machine; machine returns true if proof is correct)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; If the train arrives late and there are no taxis at the station, then John is late for his meeting.&lt;/p&gt;

&lt;p&gt;John is not late for his meeting.&lt;/p&gt;

&lt;p&gt;The train did arrive late.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Therefore&lt;/strong&gt;, there were taxis at the station.&lt;/p&gt;

&lt;p&gt;Q: Is this argument &lt;strong&gt;valid&lt;/strong&gt;? Why/Why not?&lt;/p&gt;

&lt;p&gt;Q: What is the structure of this argument?&lt;br /&gt;
A: If p and not q, then r. Not r. p. Therefore q.&lt;/p&gt;

&lt;p&gt;p = “the train arrives late”&lt;br /&gt;
q = “there are taxis at the station”&lt;br /&gt;
r = “John is late for his meeting”&lt;/p&gt;

&lt;p&gt;What if we reassign meanings to p, q, and r? We will get an equally valid argument.&lt;/p&gt;

&lt;p&gt;The factual content of statements (p, q, r) doesn’t matter. The relationships among the statements govern the argument.&lt;/p&gt;

&lt;p&gt;So what constitutes a “statement”?&lt;br /&gt;
What do logical relationships mean?&lt;/p&gt;

&lt;p&gt;We shall start with &lt;strong&gt;Propositional Logic&lt;/strong&gt;, a basic form of logic.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;proposition&lt;/strong&gt; is a declarative sentence that is either &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Either the proposition is true, or the proposition is false. It is never both true and false.&lt;/p&gt;

&lt;p&gt;e.g. If Kathleen Wynne is a Liberal, then Stephen Harper is a Tory.&lt;/p&gt;

&lt;p&gt;p-&amp;gt;q: If p then q; p is sufficient for q, q is necessary for p.&lt;/p&gt;

&lt;p&gt;p &amp;lt;-&amp;gt; q: p if and only if q (p iff q); p is equivalent to q; p exactly if q; p is necessary and sufficient for q.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Translating from English to propositional logic examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;She is clever and hard-working&lt;br /&gt;
Let p be “she is clever” and q be “she is hard-working”&lt;br /&gt;
Then we get (p ^ q)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If he does not study hard then he will fail&lt;br /&gt;
Let p be “he studies hard” and q be “he will fail”&lt;br /&gt;
Then we get ((NOT p) -&amp;gt; q)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If it rains, he will be at home; otherwsie he will go to the market or to school.&lt;br /&gt;
Let p be “it rains”, q be “he will be at home”, r be “he will go to the market”, s be “he will go to school”&lt;br /&gt;
Then we get ((p -&amp;gt; q) ^ ((NOT p) -&amp;gt; (r v s)))&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some sentences are not propositions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;interrogative: where shall we go to eat?&lt;/li&gt;
  &lt;li&gt;imperative: please pass the salt&lt;/li&gt;
  &lt;li&gt;ambiguous: time flies like an arrow&lt;/li&gt;
  &lt;li&gt;nonsense: uwgod&lt;/li&gt;
  &lt;li&gt;otherwise problematic: This sentence is false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-5-2016&quot;&gt;May 5, 2016&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Administrivia&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A01 posted, due May 11&lt;/li&gt;
  &lt;li&gt;A01 study exercises posted on Learn. Not to be handed in, extra practice&lt;/li&gt;
  &lt;li&gt;Course staff office hours posted on Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Goals for Today&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Up to Slide 50, at least up to truth tables&lt;/li&gt;
  &lt;li&gt;Syntax - Propositional&lt;/li&gt;
  &lt;li&gt;Semantics - Propositional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Atomic and Compound Propositions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In propositional logic, simple &lt;strong&gt;atomic&lt;/strong&gt; propositions are the basic building blocks. We connect atomic propositions into &lt;strong&gt;compound&lt;/strong&gt; propositions, and then analyze sets of interrelated propositions. Typical questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does a given sequence of propositions form a valid argument?&lt;/li&gt;
  &lt;li&gt;Can all propositions in a given set be true simultaneously?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we must answer the Q: What is a proposition?&lt;br /&gt;
Propositions are represented by &lt;strong&gt;formulas&lt;/strong&gt;. A formula consists of a sequence of &lt;strong&gt;symbols&lt;/strong&gt;. There are 3 kinds of symbols:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Propositional variables: usually lower case Latin  letters (e.g. p, q, r) perhaps with subscripts&lt;/li&gt;
  &lt;li&gt;Connectives: We shall use negation, ^(and), v(or), -&amp;gt; and &amp;lt;-&amp;gt; (Others are possible)&lt;/li&gt;
  &lt;li&gt;Punctuation: Only two, ( and ) (we could avoid them)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every formula is a sequence of symbols, but not every sequence of symbols is a formula. We call an arbitrary finite sequence of symbols an &lt;strong&gt;expression&lt;/strong&gt; (or &lt;strong&gt;string&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;An expression is a finite sequence of symbols. The &lt;strong&gt;length&lt;/strong&gt; of an expression is its number of symbols. We often use a letter that is not formally a symbol in order to name an expression. For example, alpha. This is an example of a “meta-symbol”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some terminology for expressions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Two expressions a and b are &lt;strong&gt;equal&lt;/strong&gt; written as a=b, iff they are of the same length, say n, and if n&amp;gt;0, then for all i in [1…n] the i-th symbol of a is the same as the i-th symbol of b.&lt;/p&gt;

&lt;p&gt;We write ab to mean the &lt;strong&gt;concatenation&lt;/strong&gt; of two expressions a and b.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formal Definition of Concatenation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a is an expression of length i and b is an expression of length j, then ab is an expression of length i+j. We have the k-th symbol of ab is:
    + if k &amp;lt;= i, the k-th symbol of a
    + if k &amp;gt; i, the (k - i)-th symbol of b&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition of “Formula”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let P be a set of propositional variables. We define the set of formulas over P inductively as follows.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An expression consisting of a single symbol of P is a formula&lt;/li&gt;
  &lt;li&gt;If phi is a formula, then the negation of phi is a formula&lt;/li&gt;
  &lt;li&gt;If phi is a formula and eta is a formula, then each of (phi and eta), (phi or eta), (phi -&amp;gt; eta), and (phi &amp;lt;-&amp;gt; eta) is a formula&lt;/li&gt;
  &lt;li&gt;Nothing else is a formula&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Note the use of meta-symbols phi and eta)&lt;/p&gt;

&lt;p&gt;The following are well-formed formulas.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;p,q,r,s (rule 1)&lt;/li&gt;
  &lt;li&gt;(not p) (rule 2, from #1)&lt;/li&gt;
  &lt;li&gt;(r ^ q) (rule 3, from #1)&lt;/li&gt;
  &lt;li&gt;((not p) -&amp;gt; s) (rule 3, from #2 and #1)&lt;/li&gt;
  &lt;li&gt;((r ^ q) v ((not p) -&amp;gt; s)) (rule 3, from #3 and #4)&lt;/li&gt;
  &lt;li&gt;(not (r ^ q)) (rule 2, from #3)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;The 6 Kinds of Formulas&lt;/strong&gt;
From the definition, we see that there are six kinds of formulas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A propositional variable = ATOM&lt;/li&gt;
  &lt;li&gt;A formula (not phi) = NEGATION&lt;/li&gt;
  &lt;li&gt;A formula (phi ^ eta) = CONJUNCTION&lt;/li&gt;
  &lt;li&gt;A formula (phi v eta) = DISJUNCTION&lt;/li&gt;
  &lt;li&gt;A formula (phi -&amp;gt; eta) = IMPLICATION&lt;/li&gt;
  &lt;li&gt;A formula (phi &amp;lt;-&amp;gt; eta) = EQUIVALENCE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q: Can a formula have two or more kinds? No.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantics of Propositional Logic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;semantics&lt;/strong&gt; of a logic describes how to interpret the well-formed formulas of the logic. The semantics of propositional logic is “compositional”: the meaning of a whole formula derives from the meaning of its parts. In propositional logic, we need to give meaning to atoms, connectives, and formulae. For example, the interpretation of the formula (p ^ q) depends on three things, the meaning of p, the meaning of q, and the meaning of ^.&lt;/p&gt;

&lt;p&gt;Definition: A &lt;strong&gt;truth evaluation&lt;/strong&gt; is a function (P -&amp;gt; {T, F}) with the set of all proposition symbols as domain and {F, T} as range. A truth eval assigns a value to every propositional variable. If t(p) = T, then we say “t makes p true”, if t(p) = F, then we say “t makes p false”. A propositional variable has no intrinsic meaning. It gets a meaning only via an evaluation.&lt;/p&gt;

&lt;p&gt;Formally, a connective represents a function from truth values to truth values. The connective (not) is unary; it maps one value to one value. The other connectives are binary, they map two values to one value.&lt;/p&gt;

&lt;p&gt;-&amp;gt; : “Truth is Preserved”; if there is not truth to preserve, the meaning is T. T-&amp;gt;F is F because truth is not preserved.&lt;br /&gt;
E.g. “If everyone is a child, then the moon is made of blue cheese” comes out true (seems non-sensical, but propositional logic gives &lt;strong&gt;every formula&lt;/strong&gt; a meaning)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary of the Value of a Formula&lt;/strong&gt;
Fix a truth evaluation t. Every formula phi has a value under t, denoted phi&lt;sup&gt;t&lt;/sup&gt;, determined as follows:
1. p&lt;sup&gt;t&lt;/sup&gt; = t(p)
2. (not phi)&lt;sup&gt;t&lt;/sup&gt; =
    + T if phi&lt;sup&gt;t&lt;/sup&gt; = F
    + F if phi&lt;sup&gt;t&lt;/sup&gt; = T
3. (phi ^ eta)&lt;sup&gt;t&lt;/sup&gt; =
    + T if phi&lt;sup&gt;t&lt;/sup&gt; = eta&lt;sup&gt;t&lt;/sup&gt; = T
    + F otherwise
4. (phi v eta)&lt;sup&gt;t&lt;/sup&gt; =
    + T if phi&lt;sup&gt;t&lt;/sup&gt; = T or if eta&lt;sup&gt;t&lt;/sup&gt; = T
    + F otherwise
5. (phi -&amp;gt; eta)&lt;sup&gt;t&lt;/sup&gt; =
    + T if phi&lt;sup&gt;t&lt;/sup&gt; = F or if eta&lt;sup&gt;t&lt;/sup&gt; = T
    + F otherwise
6. (phi &amp;lt;-&amp;gt; eta)&lt;sup&gt;t&lt;/sup&gt; =
    + T if phi&lt;sup&gt;t&lt;/sup&gt; = eta&lt;sup&gt;t&lt;/sup&gt;
    + F otherwise&lt;/p&gt;

&lt;p&gt;The value of a formula comes from the values of its variables, combined as given by its connectives. The valuation t is necessary. WIthout a valuation, a formula has no value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unique Readability of Formulae&lt;/strong&gt;
We have defined the semantics of a formula forom its ysyntax. Is this &lt;strong&gt;well-defined&lt;/strong&gt;? Or can a formula get two different meanings, i.e. ambiguous?&lt;/p&gt;

&lt;p&gt;Theorem. Every formula has a unique derivation as a well-formed formula. That is, each formula has exactly one of the six forms:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;an atom&lt;/li&gt;
  &lt;li&gt;(not phi)&lt;/li&gt;
  &lt;li&gt;(phi ^ eta)&lt;/li&gt;
  &lt;li&gt;(phi v eta)&lt;/li&gt;
  &lt;li&gt;(phi -&amp;gt; eta)&lt;/li&gt;
  &lt;li&gt;(phi &amp;lt;-&amp;gt; eta)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We prove this by mathematical induction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review of Induction&lt;/strong&gt;
Suppose P names a property. We write P(2) to mean “2 has property P”, or “P holds for 2”.&lt;/p&gt;

&lt;p&gt;A statement “every natural number has property P” corresponds to a sequence of statements:&lt;br /&gt;
P(0), P(1), P(2), P(3),…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principles of Mathematical Induction&lt;/strong&gt;
Suppose we establish two things: that
    + 0 has property P, and that
    + whenever any number has property P, then the next number also has property P.
Then we may conclude that every natural number has property P.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Techniques&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To talk about something, give it a name.&lt;br /&gt;
E.g. property P, number k&lt;/li&gt;
  &lt;li&gt;A formula is a textual object. We can subsitute one symbol or expression for another&lt;/li&gt;
  &lt;li&gt;The induction principle gives a template:
    &lt;ul&gt;
      &lt;li&gt;proof has 2 parts: basis and inductive step&lt;/li&gt;
      &lt;li&gt;In the inductive step, hypothesize P(k) and prove P(k+1)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;may-6-2016---tutorial-1&quot;&gt;May 6, 2016 - Tutorial 1&lt;/h2&gt;

&lt;p&gt;A few exercises of truth tables, translations, and structural induction:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-10-2016---lecture-3&quot;&gt;My 10, 2016 - Lecture 3&lt;/h2&gt;

&lt;h2 id=&quot;induction-continued&quot;&gt;Induction Continued&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;structural induction (proving facts about formulae)
    &lt;ul&gt;
      &lt;li&gt;prove unique readbility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;equivalence (semantic)&lt;/li&gt;
  &lt;li&gt;entailment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: The negation of an atomic proposition is no longer an atomic proposition.&lt;/p&gt;

&lt;h2 id=&quot;structural-induction&quot;&gt;Structural Induction&lt;/h2&gt;

&lt;p&gt;A formula (anything built according to the inductive definition of a formula (4 rules)) is not a natural number, but it suffices to prove any one of the following:
    + For every natural number n, every formula with n or fewer &lt;strong&gt;symbols&lt;/strong&gt; has property P
    + For every natural number n, every formula with n or fewer &lt;strong&gt;connectives&lt;/strong&gt; has property P&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem (Principle of Structural Induction): Let R be a property. Suppose that&lt;br /&gt;
    1. For each atomic formula p, we have R(p)&lt;br /&gt;
    2. For each formula phi, if R(phi) then R((not phi))&lt;br /&gt;
    3. For each pair of formulae phi and eta, and each connective *, if R(phi) and R(eta) then R((phi * eta))&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then R(phi) for every formula phi.&lt;/p&gt;

&lt;p&gt;It is a special case of mathematical induction.&lt;/p&gt;

&lt;p&gt;Example:&lt;br /&gt;
&lt;strong&gt;Lemma: Every well-formed formula has an equal number of left and right parentheses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Proof: Use structural induction. The property to prove is R(phi): phi has an equal number of left and right parentheses for every formula phi&lt;/p&gt;

&lt;p&gt;Base case: phi is an atom. phi has no parentheses - only a propositional variable. Thus R(phi) holds.&lt;/p&gt;

&lt;p&gt;IH: Formulae phi and eta both have property R.&lt;/p&gt;

&lt;p&gt;IS: We need to prove each of the formulae (not phi), (phi ^ eta), (phi v eta), (phi -&amp;gt; eta) and (phi &amp;lt;-&amp;gt; eta). WLOG, consider (phi ^ eta)&lt;/p&gt;

&lt;p&gt;Notation: For any formula zeta, let op(zeta) denote the number of ‘(‘ in zeta, and let cl(zeta) denote the number of ‘)’ in zeta.&lt;/p&gt;

&lt;p&gt;We calculate&lt;br /&gt;
op((phi ^ eta)) = 1 + op(phi) + op(eta)
= 1 + cl(phi) + cl(eta) (R(phi) and R(eta))
= cl((phi ^ eta))&lt;/p&gt;

&lt;p&gt;(Also prove the unary NOT case)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unique Readability Proof&lt;/strong&gt;&lt;br /&gt;
Theorem: Every formula is exactly one of the six kinds, and in each case it is of that form in &lt;strong&gt;exactly one&lt;/strong&gt; way.&lt;/p&gt;

&lt;p&gt;Proof:&lt;br /&gt;
Add in more stuff to the proof (1. the first symbol of phi is either ‘(‘ or a variable; 2. phi has an equal number of ‘(‘ and ‘)’, and each proper prefix of phi has more ‘(‘ than ‘)’  (parentheses are balanced))&lt;/p&gt;

&lt;p&gt;A proper prefix of phi is a non-empty expression x such that phi is xy for some non-empty expression y.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Property P(n):&lt;/strong&gt; 1, 2, and 3. phi has unique construction as a formula, which is what we are trying to prove here.&lt;/p&gt;

&lt;p&gt;Aside: To Show x is unique:&lt;br /&gt;
1) Let x’ have same properties as x&lt;br /&gt;
2) Prove x’ = x&lt;/p&gt;

&lt;p&gt;Let phi be an arbitrary formula. We prove for any natural number n, every formula phi&lt;/p&gt;

&lt;p&gt;Base cases:&lt;br /&gt;
Case 1: k=0 binary connective symbols. We prove by induction on the number of unary connective symbols (i.e. NOT) in phi
    + Base (0 NOTs): the only possibility is phi = p, for some propositional variable p. Then phi has properties 1, 2, 3 (thus R) (2. No proper prefixes)
    + IH: (&amp;gt; 0 NOTs):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tautology, Contradiction, and Satisfiable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A formula alpha is a &lt;strong&gt;tautology&lt;/strong&gt; iff for every truth eval t, alpha&lt;sup&gt;t&lt;/sup&gt; = T. Evaluates to true under any circumstances.&lt;/p&gt;

&lt;p&gt;A formula alpha is a &lt;strong&gt;contradiction&lt;/strong&gt; (aka unsatisifiable) iff for every truth eval t, alpha&lt;sup&gt;t&lt;/sup&gt; = F. Evaluates to false under any circumstances.&lt;br /&gt;
E.g. p ^ NOT p&lt;/p&gt;

&lt;p&gt;A formula alpha is a &lt;strong&gt;satisfiable&lt;/strong&gt; iff it is not a contradiction. Evaluates to at least one true under all circumstances.&lt;/p&gt;

&lt;p&gt;How to prove that a formula is a tautology? One method is to fill out a truth table. Can we do better? We can analyze what would happen if we did. We can use a &lt;strong&gt;valuation tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;may-12-2016---lecture-4&quot;&gt;May 12, 2016 - Lecture 4&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Equivalence&lt;/li&gt;
  &lt;li&gt;Entailment&lt;/li&gt;
  &lt;li&gt;Adequate sets of connectives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Equivalent formulae have the same final column in their truth tables - they have the same value under any valuation.&lt;/p&gt;

&lt;p&gt;Recall a valuation t is a function t: P-&amp;gt;{T, F}, i.e. a assignment of F or T to very propositional variable&lt;/p&gt;

&lt;p&gt;Commutativity, Associativity, Distributivity, Idempotence, Double Negation, DML,&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 18:56:00 -0400</pubDate>
        <link>http://dzed.me/notes/2016/05/02/Cs-245.html</link>
        <guid isPermaLink="true">http://dzed.me/notes/2016/05/02/Cs-245.html</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>Life Before University &amp; [Admission] How I Got into Waterloo</title>
        <description>&lt;p&gt;Time flies at university. High school already feels like ages ago, seriously.&lt;/p&gt;

&lt;p&gt;Looking back, I feel that I had a lot of crazy ideas when I was younger. Before deciding to go in to computer science, I really wanted to go into biology and become a pharmacologist. It all started in the summer of 2013, when I took the grade 11 level biology class in summer school in Vancouver. We got to dissect frogs, earthworms, and sashimi grade squids. Almost everyone else there was repelled by the scents of preserving alcohol and food remnants in the specimen’s cavities. Except me. I thoroughly enjoyed it. During a field trip to the Vancouver General Hospital Disease Centre, I was the only one daring to look at a severed toe infected by gout. It was truly intriguing.&lt;/p&gt;

&lt;p&gt;People told me that “biology is not a real science” because most of it is, supposedly, just rote memorization of obscure Latin and Greek names of phyla and proteins. But I didn’t think so, and finished the entire curriculum of grade 12 biology on my own in just two weeks after summer was over. Then I found out about the National Biology Competition hosted by the University of Toronto, and promptly signed up for it. For the next two months, I read university textbooks on biochemistry, evolution, and cell biology, and in my free time, I watched YouTube videos made by high school biology teachers. I was ranked 106th in the country in the competition. I found a volunteering job as a museum educator at the &lt;a href=&quot;http://beatymuseum.ubc.ca&quot;&gt;Beaty Biodiversity Museum&lt;/a&gt; at the University of British Columbia (UBC).&lt;/p&gt;

&lt;p&gt;I was also very interested in filmmaking in grade 11 and took the film and drama course. Here’s my very first short film.&lt;/p&gt;

&lt;iframe width=&quot;740&quot; height=&quot;500&quot; src=&quot;https://www.youtube.com/embed/Igydkgl4FdQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;admission&quot;&gt;[Admission]&lt;/h2&gt;

&lt;p&gt;I didn’t know how competitive university application was until the end of grade 11. Before that, I thought a high 80 would suffice for most top Canadian universities, at least that’s what was advertised on most university pamphlets and viewbooks. But during the summer before my grade 12 year, I stumbled upon the StudentAwards forum (now called Yconic) and was absolutely terrified by the “Admission Average” threads. Apparently the (rumored) cutoff for CS was 93%? That’s ridiculous.&lt;/p&gt;

&lt;p&gt;So I worked my butt off in grade 12, aiming for both Software Engineering (SE, another great program) and Computer Science (CS) at UW. Admission averages are calculated differently for these programs, though. SE requires 6 BC academic courses, and 5 of them have to be English 12, Pre-Calculus 12, Calculus 12, Physics 12, and Chemistry 12. On the other hand, CS is much more lenient in terms of required courses. You only need English 12, Pre-Calculus 12, Calculus 12, and two other academically accepted courses (in my case, I picked Biology 12 and Computer Programming 12).&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Apr 2016 18:20:00 -0400</pubDate>
        <link>http://dzed.me/blog/2016/04/26/what-i-did-before-uni.html</link>
        <guid isPermaLink="true">http://dzed.me/blog/2016/04/26/what-i-did-before-uni.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
